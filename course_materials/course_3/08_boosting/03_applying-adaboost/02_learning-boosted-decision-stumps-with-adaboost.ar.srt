1
00:00:00,066 --> 00:00:04,859
[موسيقى]

2
00:00:04,859 --> 00:00:08,387
سنأخذ بعض الدقائق في تمثيل هذه
الخوارزمية المجردة

3
00:00:08,387 --> 00:00:12,650
التي وصفناها ونرى كيف تبدو في
سياق تعلم فروع القرار.

4
00:00:12,650 --> 00:00:13,980
توجد فروع قرارات معززة أخرى،

5
00:00:13,980 --> 00:00:17,810
وهي طريقة افتراضية بسيطة وجيدة حقًا
للتدرب على البيانات.

6
00:00:17,810 --> 00:00:22,320
وهي الطريقة التي سنتعمق فيها
بشكل أكبر

7
00:00:22,320 --> 00:00:24,890
وستساعدنا على تأسيس بعض المفاهيم
التي واجهتنا حتى الآن.

8
00:00:26,260 --> 00:00:29,400
لذا، قد قمت بتوضيح خوارزمية AdaBoost
التي ناقشناها من قبل

9
00:00:29,400 --> 00:00:31,020
في الشرائح السابقة، ولكن

10
00:00:31,020 --> 00:00:35,850
لأكون واضحًا، فسأتحدث حول فروع
القرار الخطية لـ Ft

11
00:00:35,850 --> 00:00:40,070
محاولين اكتشاف كيفية تحديثها، واكتشاف
المعامل لديها، وهو W^t.

12
00:00:41,280 --> 00:00:43,510
خطوتنا الأولى هي اكتشاف كيفية
تعلم فرع القرار التالي،

13
00:00:43,510 --> 00:00:44,470
والذي سيكون Ft.

14
00:00:44,470 --> 00:00:47,570
وهذا سيكون بمثابة التعلم القياسي
لفرع القرار.

15
00:00:47,570 --> 00:00:52,040
وسنحاول تقسيمها وفقًا لكل سمة، من حيث
الدخل والسجل الائتماني،

16
00:00:52,040 --> 00:00:54,710
والمدخرات وظروف السوق.

17
00:00:54,710 --> 00:00:57,570
واكتشاف مدى جودة كل من فروع
القرارات الناتجة

18
00:00:57,570 --> 00:00:59,460
بالنسبة للبيانات المرجحة.

19
00:00:59,460 --> 00:01:04,360
ولاحظ أنه في خلال العملية قد نقوم
بتقسيم الدخل عدة مرات.

20
00:01:04,360 --> 00:01:07,430
لذا، فخلال عدة مراحل متكررة قد
نعيد النظر في نفس السمة.

21
00:01:07,430 --> 00:01:09,280
سنحاول تقسيم كل واحدة من
تلك السمات،

22
00:01:09,280 --> 00:01:13,370
وسنقوم بقياس نسبة الخطأ المرجح بالنسبة لكل
واحدة منهم على بيانات التدريب.

23
00:01:13,370 --> 00:01:16,840
لنفترض تقسيم الدخل، فقد تكون نسبة
ترجيح الخطأ 0.2.

24
00:01:16,840 --> 00:01:18,984
وبالنسبة لتقسيم الائتمان،
فقد تكون 0.35.

25
00:01:18,984 --> 00:01:21,490
ولتقسيم المدخرات،
قد تكون 0.3.

26
00:01:21,490 --> 00:01:24,370
وأخيرًا، مرحلة تقسيم
ظروف السوق،

27
00:01:24,370 --> 00:01:26,160
وقد تكون الأسوأ ضمن فروع
القرارات الأربعة تلك.

28
00:01:26,160 --> 00:01:30,194
فتبعًا لهذه البيانات المرجحة، فقد يكون
خطأ مرجحًا بنسبة 0.4.

29
00:01:31,590 --> 00:01:36,670
وبالتالي، سننتقي أفضل سمة، وهي السمة
التي لديها أقل نسبة خطأ مرجح،

30
00:01:36,670 --> 00:01:38,680
لذا، سنقوم باختيار التقسيم
الأول للسمة.

31
00:01:38,680 --> 00:01:40,900
وسنقوم بتقسيم الدخل إلى
أكبر من 100000.

32
00:01:40,900 --> 00:01:43,520
لذا، فستمثل Ft فروع القرارات،

33
00:01:43,520 --> 00:01:49,160
والتي تقول إن الدخل الأكبر من 100000، إذا كان كذلك، فحينها
يكون القرض آمنًا، وإذا لم يكن فحينها يكون القرض يشكل مخاطرة.

34
00:01:50,260 --> 00:01:51,520
والآن، فإن السؤال الأخير،

35
00:01:51,520 --> 00:01:54,730
ما المعامل الذي سنعطيه لهذا
المصنف المحدد؟

36
00:01:54,730 --> 00:01:59,520
كل ما علينا القيام به هو إدخال القيمة 0.2 إلى
معادلة AdaBoost، وإذا قمنا بإدخالها

37
00:01:59,520 --> 00:02:02,070
وقمنا ببعض الرياضيات، فستكون النتيجة 0.69.

38
00:02:02,070 --> 00:02:06,194
لذا، فمعامل فرع القرار هذا
سيكون 0.69.

39
00:02:08,170 --> 00:02:12,690
وبالعودة إلى خوارزمية AdaBoost،
فقد ناقشنا كيفية تعلم

40
00:02:12,690 --> 00:02:15,270
هذه الأشياء الجديدة من البيانات،
وكيفية اكتشاف المعامل.

41
00:02:15,270 --> 00:02:20,320
دعونا نتحدث عن كيفية تحديث ترجيح
αi لكل نقطة بيانات.

42
00:02:20,320 --> 00:02:24,140
وها هي العملية البديهية
التي تحدث.

43
00:02:24,140 --> 00:02:26,850
لدينا نقاط البيانات

44
00:02:26,850 --> 00:02:31,120
وقد قمت بتحديدهم هنا وفقًا للدخل
كما فعلنا من قبل.

45
00:02:31,120 --> 00:02:33,780
ولكني سأجري عملية تنبؤ باستخدام
فرع القرار هذا.

46
00:02:33,780 --> 00:02:39,040
والسؤال هو، ما مدى جودة فرع القرار
الذي لديه دخل أكبر من 100000،

47
00:02:39,040 --> 00:02:42,960
وإذا قمت بالنظر إليه، فستجد أنه يحدث أخطاء في بعض
نقاط البيانات ويأتي بالبعض الآخر بشكل صحيح.

48
00:02:42,960 --> 00:02:47,220
لذا، فقد حددت النقاط الصحيحة باللون الأخضر
والأخطاء باللون الأحمر.

49
00:02:48,410 --> 00:02:51,494
وإذا أخذنا الترجيحات السابقة التي يرمز لها
بالرمز α ،لكل واحدة من نقاط البيانات تلك،

50
00:02:51,494 --> 00:02:54,730
كما أنا موضح تلك الترجيحات
الموجودة هنا.

51
00:02:54,730 --> 00:02:57,650
فنحن نحتاج إلى حساب الترجيح الجديد
وفقًا لصيغة المعادلة بالأعلى،

52
00:02:57,650 --> 00:03:00,260
والتي عبارة عن صيغة قياسية
لمعادلة AdaBoost .

53
00:03:00,260 --> 00:03:03,565
سنقوم بإدخال قيمة W^ التي
قمنا بحسابها 0.69،

54
00:03:03,565 --> 00:03:08,410
إلى معادلة AdaBoost لاكتشاف ما هو حاصل
ضرب كل واحدة من هذه الترجيحات.

55
00:03:08,410 --> 00:03:09,820
إذا قمنا بإدخالها،

56
00:03:09,820 --> 00:03:14,850
فسترى أن كل قيمة -0.69
هي نصف،

57
00:03:14,850 --> 00:03:20,160
فسنقوم بالحصول على نصف الترجيح لكل نقطة
بيانات صحيح، وأن كل قيمة 0.69 هي 2.

58
00:03:20,160 --> 00:03:23,250
لذا، فسنقوم بمضاعفة الترجيح لكل
نقطة بيانات غير صحيحة.

59
00:03:23,250 --> 00:03:24,810
لذا، سأنتقل من صف إلى آخر،

60
00:03:24,810 --> 00:03:28,030
وبالنسبة للنقاط الخضراء الصحيحة، فسأقوم
بتقسيم الترجيح إلى النصف.

61
00:03:28,030 --> 00:03:31,600
وبالتالي، بالنسبة للصف الأول هناك فكان الترجيح
من قبل 0.5، وقد أصبح الآن 0.25.

62
00:03:31,600 --> 00:03:35,560
والنقطة التالي كانت 1.5 وقد أصبحت
0.75 لأنها نقطة صحيحة.

63
00:03:35,560 --> 00:03:39,060
بالنسبة للصف الثالث، فقد ارتكبت خطأ
حيث كان يساوي 1.5 من قبل

64
00:03:39,060 --> 00:03:41,220
والآن، سأقوم بمضاعفة تلك
القيمة، سأجعلها 3.

65
00:03:41,220 --> 00:03:46,430
لذا، يمكننا التعامل مع كل نقطة بيانات تلو الأخرى
ثم نضربها في 2 أو نقسمها على 2،

66
00:03:46,430 --> 00:03:50,600
وهو الترجيح، الذي وفقًا له نكون حصلنا
على نقطة البيانات بشكل صحيح أو لا.

67
00:03:50,600 --> 00:03:54,491
وإن الأمر في غاية البساطة لإنشاء مصنف
لفروع القرارات في AdaBoost،

68
00:03:54,491 --> 00:03:57,566
فذلك يميل للعمل بشكل جيد للغاية على
نطاق واسع من مجموعات البيانات.

69
00:03:57,566 --> 00:04:02,069
[موسيقى]