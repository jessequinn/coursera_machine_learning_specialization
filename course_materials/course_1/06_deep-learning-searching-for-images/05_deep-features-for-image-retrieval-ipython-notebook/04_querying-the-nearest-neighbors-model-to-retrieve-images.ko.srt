1
00:00:00,003 --> 00:00:03,681
[음악]

2
00:00:03,681 --> 00:00:06,631
이제 모델을 쓸 수 있습니다

3
00:00:10,421 --> 00:00:14,514
딥 특징을 통한

4
00:00:14,514 --> 00:00:19,570
이미지 검색 모델로

5
00:00:19,570 --> 00:00:24,631
유사한 이미지 찾기

6
00:00:24,631 --> 00:00:25,421
자 이제

7
00:00:25,421 --> 00:00:29,960
모델로 유사한 이미지를 찾아보죠

8
00:00:29,960 --> 00:00:33,860
바로 해봅시다

9
00:00:33,860 --> 00:00:37,880
먼저 특정 이미지,

10
00:00:37,880 --> 00:00:43,000
고양이 이미지를 변수에 저장합니다

11
00:00:43,000 --> 00:00:47,090
image_train에서

12
00:00:47,090 --> 00:00:50,170
18번째 이미지를 꺼냅니다

13
00:00:50,170 --> 00:00:54,630
이렇게 하면 됩니다

14
00:00:54,630 --> 00:00:56,780
뭔지 보여드리기 위해

15
00:00:56,780 --> 00:01:04,190
cat['image'].show를 하면

16
00:01:04,190 --> 00:01:06,730
노트북에 보일 텐데

17
00:01:06,730 --> 00:01:11,740
그전에 캔버스 대상을 IPython으로
설정해야 합니다

18
00:01:13,920 --> 00:01:16,000
이게 지금까지 한 거고요

19
00:01:16,000 --> 00:01:17,620
됐습니다

20
00:01:17,620 --> 00:01:20,890
얼룩무늬 고양이 이미지네요

21
00:01:20,890 --> 00:01:24,045
조금 작아보이지만

22
00:01:24,045 --> 00:01:25,220
고양이 이미지인 건 틀림없습니다

23
00:01:25,220 --> 00:01:26,420
이리저리 만져봐도 됩니다

24
00:01:26,420 --> 00:01:32,840
이 고양이의 최근접 이웃을 찾아보죠

25
00:01:32,840 --> 00:01:37,660
한번 해봅시다

26
00:01:37,660 --> 00:01:41,560
고양이 이미지의 최근접 이웃을 찾습니다

27
00:01:41,560 --> 00:01:46,550
knn_model에 고양이 이미지를

28
00:01:46,550 --> 00:01:49,350
입력합니다

29
00:01:50,990 --> 00:01:54,710
이 고양이 이미지에 가까운 건

30
00:01:54,710 --> 00:02:00,850
이미지 384, 6910 등입니다

31
00:02:00,850 --> 00:02:04,280
숫자만 보고 어떤 이미지인지
알기는 어렵습니다

32
00:02:04,280 --> 00:02:07,530
So when we create that,
we'll create a helper function together
그렇기 때문에 인덱스를 입력하면서

33
00:02:07,530 --> 00:02:11,690
이미지를 실제로 보여주는
도우미 함수도 같이 만듭니다

34
00:02:11,690 --> 00:02:14,810
이 기회에 함수를 정의해봅시다

35
00:02:16,200 --> 00:02:21,980
get_images_ids란 새로운 파이썬 함수를

36
00:02:21,980 --> 00:02:29,554
정의합니다

37
00:02:30,950 --> 00:02:36,210
참조 열에 ID가 있는데 이거고

38
00:02:36,210 --> 00:02:38,796
이미지가 반환됩니다

39
00:02:38,796 --> 00:02:42,902
그러면 여기서

40
00:02:42,902 --> 00:02:48,035
출력은

41
00:02:48,035 --> 00:02:53,298
죄송합니다

42
00:02:53,298 --> 00:02:56,610
출력은 질의의 결과가 됩니다

43
00:02:56,610 --> 00:03:01,390
query_result라고 하지요

44
00:03:01,390 --> 00:03:06,976
함수인데 query_result는

45
00:03:06,976 --> 00:03:14,010
image_train를 반환하는 역할만 합니다

46
00:03:14,010 --> 00:03:17,361
훈련 데이터에다 filter_by란 작업을

47
00:03:17,361 --> 00:03:22,360
실행하면 데이터의 행 집합이 선택됩니다

48
00:03:22,360 --> 00:03:31,140
방금 생성한 query_result를 선택합니다

49
00:03:32,180 --> 00:03:36,516
query_result를 선택하면

50
00:03:36,516 --> 00:03:42,560
reference_label 열로 돌아옵니다

51
00:03:43,560 --> 00:03:48,775
query_result['reference_label']에

52
00:03:48,775 --> 00:03:55,029
이 표에 있는 모든 이미지 중에

53
00:03:55,029 --> 00:04:04,070
reference_label가 일치하면
반환하라고 합니다

54
00:04:04,070 --> 00:04:05,440
도우미 함수가 하는 역할이 그겁니다

55
00:04:05,440 --> 00:04:07,040
이제 계속해서 타이핑할 필요가 없습니다

56
00:04:07,040 --> 00:04:09,349
이제 사용하기 전에

57
00:04:09,349 --> 00:04:13,880
실험을 조금 해봅시다

58
00:04:13,880 --> 00:04:17,470
이 함수를 막 정의했죠

59
00:04:17,470 --> 00:04:22,350
정의했습니다

60
00:04:22,350 --> 00:04:25,220
get_images_from_ids라고 하는게

61
00:04:25,220 --> 00:04:26,810
좀더 자연스럽죠?

62
00:04:26,810 --> 00:04:31,170
그렇게 합시다

63
00:04:32,670 --> 00:04:35,610
이제 해봅시다

64
00:04:35,610 --> 00:04:39,301
고양이

65
00:04:39,301 --> 00:04:45,559
고양이 이미지가 있었는데

66
00:04:45,559 --> 00:04:50,870
cat_neighbors이라고 해둡시다

67
00:04:50,870 --> 00:04:54,495
cat_neighbors은

68
00:04:54,495 --> 00:04:59,507
get_images_from_ids을 호출하고

69
00:04:59,507 --> 00:05:06,660
매개변수로 knn_model에 고양이를
넣은 걸 씁니다

70
00:05:09,150 --> 00:05:10,800
이게 cat_neighbors이 됩니다

71
00:05:10,800 --> 00:05:17,310
이제 이미지를 보여주기만 하면 됩니다

72
00:05:17,310 --> 00:05:22,453
cat_neighbors['

73
00:05:22,453 --> 00:05:26,440
image'].show를 입력합니다

74
00:05:26,440 --> 00:05:30,780
데이터를 보기 위해 조작을
좀 해야 됐는데

75
00:05:30,780 --> 00:05:35,260
가장 가까운 고양이는 입력한 고양이고

76
00:05:35,260 --> 00:05:37,300
다른 고양이도 얼룩무늬인 것 같네요

77
00:05:37,300 --> 00:05:42,399
[음악]