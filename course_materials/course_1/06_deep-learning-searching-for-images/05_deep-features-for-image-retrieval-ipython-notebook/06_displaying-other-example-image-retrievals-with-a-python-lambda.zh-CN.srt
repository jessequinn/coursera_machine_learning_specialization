1
00:00:00,097 --> 00:00:04,125
[背景音乐]
翻译: RyukaSuu |审阅: 19waa
Coursera Global Translator Community

2
00:00:04,125 --> 00:00:07,525
好 这里我要做最后一件事情

3
00:00:07,525 --> 00:00:13,650
因为这个只是好玩 而且我们都会很兴奋

4
00:00:13,650 --> 00:00:21,610
所以 我要做的是
查询一个特别的汽车来获取一张特别的图片

5
00:00:21,610 --> 00:00:26,712
让我们创建一个可以完成一切的函数
而且任何时候我们都可以创建它

6
00:00:26,712 --> 00:00:31,570
因此这会是个有点

7
00:00:31,570 --> 00:00:35,920
有趣的事情

8
00:00:35,920 --> 00:00:39,418
那么 为了好玩

9
00:00:39,418 --> 00:00:45,543
来创建一个lambda函数 来找到和

10
00:00:45,543 --> 00:00:51,470
显示最近邻的图片

11
00:00:51,470 --> 00:00:54,680
这是个Python小技巧

12
00:00:54,680 --> 00:00:55,900
我们一起来尝试它

13
00:00:58,230 --> 00:01:00,360
我们称之为lambda

14
00:01:01,470 --> 00:01:05,172
找到 哦不 直接展示

15
00:01:05,172 --> 00:01:12,268
show_neighbors而且

16
00:01:12,268 --> 00:01:20,160
这个将是个lambda表达式 参数为图片的索引表下标i

17
00:01:21,320 --> 00:01:22,894
这就是我要做的

18
00:01:22,894 --> 00:01:25,754
它正在按照我们看到的方式进行

19
00:01:25,754 --> 00:01:31,644
通过id获取图片
查询knn_model

20
00:01:31,644 --> 00:01:38,040
但并不是查询车辆
而是查找位于image_train第i位与第i+1位之间的那辆

21
00:01:39,520 --> 00:01:43,480
而后 我们获取图片且调用.show函数

22
00:01:43,480 --> 00:01:46,005
这是个非常长的lambda表达式

23
00:01:46,005 --> 00:01:50,247
但是创建了之后 我们可以非常灵巧得使用它

24
00:01:50,247 --> 00:01:54,920
现在我们调用show_neighbors且

25
00:01:54,920 --> 00:02:00,098
我传入红色汽车的索引表下标8 然后

26
00:02:00,098 --> 00:02:06,100
如果你向下滚动
你会看到红色的车辆

27
00:02:06,100 --> 00:02:08,570
真的酷

28
00:02:08,570 --> 00:02:11,340
现在我们可以调用show_neighbors查找其他图片

29
00:02:13,520 --> 00:02:16,810
实际上我之前没想过或者测试过
然后就创建了这个lambda函数

30
00:02:16,810 --> 00:02:20,340
来整合一切 所以实际上 我没尝试过
让我们尝试其他数字

31
00:02:20,340 --> 00:02:23,270
那么 26如何?

32
00:02:23,270 --> 00:02:26,518
所以现在它可以找到邻居们 甚至知道具体内容

33
00:02:26,518 --> 00:02:28,270
26号是这里的车

34
00:02:28,270 --> 00:02:30,720
来把它变大一些方便看清

35
00:02:32,750 --> 00:02:36,800
那么展示的26号的邻居是这辆蓝色汽车

36
00:02:36,800 --> 00:02:40,650
同样很酷地指定了一些其他汽车

37
00:02:40,650 --> 00:02:45,755
来选取一些其他数字
show_neighbors

38
00:02:45,755 --> 00:02:50,990
在2000张图片里
可以是第1222号图片

39
00:02:50,990 --> 00:02:56,970
我实际上不知道会出现什么
但是现在可以看到 啊 是只鸟

40
00:02:56,970 --> 00:02:59,125
而且你找到了最近邻

41
00:02:59,125 --> 00:03:01,409
一些鸟而且它们处在相似的姿势下

42
00:03:01,409 --> 00:03:04,950
而且我知道这是一种鸵鸟的头
以及相似类的鸟

43
00:03:04,950 --> 00:03:07,290
但是它们都是鸟类 这点很酷

44
00:03:07,290 --> 00:03:09,170
记住我们现在只是用这些深度特征

45
00:03:09,170 --> 00:03:12,320
现在作为最后一个 show_neighbors且

46
00:03:12,320 --> 00:03:13,820
你可以在电脑上随意尝试

47
00:03:13,820 --> 00:03:19,082
让我们看看第2000张的近邻们

48
00:03:19,082 --> 00:03:25,330
哎呦 Shift+Enter 第2000张的邻居是什么呢?

49
00:03:25,330 --> 00:03:27,620
好了 你有了辆汽车

50
00:03:27,620 --> 00:03:28,660
有点令人困惑

51
00:03:28,660 --> 00:03:31,250
有一张鸵鸟但是其他的都是汽车

52
00:03:31,250 --> 00:03:36,478
所以简单的图片在图片检索中表现不错

53
00:03:36,478 --> 00:03:40,100
你看到了 我尝试的样例里出现了一个错误

54
00:03:40,100 --> 00:03:44,670
但是它实际上给了你很好的结果以及表现

55
00:03:44,670 --> 00:03:47,730
而且这个从没在该训练集或该图片上做训练

56
00:03:47,730 --> 00:03:50,496
图片有不同的尺寸种类 但是

57
00:03:50,496 --> 00:03:52,594
它仍然运行得不错且非常振奋人心

58
00:03:52,594 --> 00:03:53,930
这些工具

59
00:03:53,930 --> 00:03:58,694
以及技术可以通过激动人心的方式应用到广泛的领域中

60
00:03:58,694 --> 00:04:02,759
[背景音乐]
翻译: RyukaSuu |审阅: 19waa
Coursera Global Translator Community