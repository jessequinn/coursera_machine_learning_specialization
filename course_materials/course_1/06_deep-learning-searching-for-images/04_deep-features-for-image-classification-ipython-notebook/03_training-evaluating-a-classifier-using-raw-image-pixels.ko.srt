1
00:00:00,382 --> 00:00:04,272
[음악]

2
00:00:04,272 --> 00:00:06,618
우리는 폰트를 줄이고 있고

3
00:00:06,618 --> 00:00:10,980
이 데이터 세트에 대해 기본 모델을 훈련할 것입니다.

4
00:00:10,980 --> 00:00:15,890
따라서 첫 번째로 제가 하고 있는 일은 이 사진들을 사용하지 않는 것입니다.

5
00:00:15,890 --> 00:00:18,050
대신에 이미지들의 픽셀을 사용하고 

6
00:00:18,050 --> 00:00:21,400
픽셀들에 대한 분류법을 학습해서 그것이 얼마나 잘 작동하는지 봅니다. 

7
00:00:21,400 --> 00:00:25,625
그럼 한번 해보도록 하죠.

8
00:00:25,625 --> 00:00:33,119
#Train a classifier.

9
00:00:33,119 --> 00:00:34,420
여기에 제가 철자를 잘못 적었네요.

10
00:00:34,420 --> 00:00:39,248
따라서 #Train a classifier를

11
00:00:39,248 --> 00:00:43,420
raw 이미지 픽셀들에 실행합니다.

12
00:00:45,410 --> 00:00:49,790
이것들이 저의 특성들이 될 것입니다. 이런 깊은 특성들이 아닌 raw 이미지 픽셀들 말이죠.

13
00:00:49,790 --> 00:00:54,306
그리고 저는 이것을 raw, 죄송합니다.

14
00:00:54,306 --> 00:01:01,400
raw_pixel_model이라고 부르겠습니다.

15
00:01:01,400 --> 00:01:04,480
그리고 제가 사용할 분류법은, 사실 저는 아무 분류법이나 사용할 수 있습니다.

16
00:01:04,480 --> 00:01:06,280
성과는 어차피 같을 것이기 때문이죠.

17
00:01:06,280 --> 00:01:08,200
저는 우리가 감성 분석 노트북에서 사용했던

18
00:01:08,200 --> 00:01:12,730
logistic regression을 사용할 것입니다.

19
00:01:12,730 --> 00:01:16,480
logistic regression에서 우리는 데이터 세트를 주어줍니다.

20
00:01:16,480 --> 00:01:18,270
따라서 이것은 트레이닝 데이터 세트가 될 것입니다.

21
00:01:20,730 --> 00:01:22,960
이것이 저의 imgage_train이죠.

22
00:01:22,960 --> 00:01:26,030
저는 이것에게 타깃이 무엇인지 알려줄 것입니다.

23
00:01:27,560 --> 00:01:31,790
타깃은 레이블이라고 불리는 이 데이터 세트 안의 칼럼입니다.

24
00:01:31,790 --> 00:01:36,440
그리고 그 칼럼은 각각의 이미지에 대한 레이블을 가지고 있죠.

25
00:01:37,710 --> 00:01:41,260
그리고 저는 이것에게 사용할 특성들이 무엇인지 알려줄 것입니다.

26
00:01:41,260 --> 00:01:48,410
따라서 이 경우, imgae_array라고 불리는 칼럼이 특성들이 됩니다.

27
00:01:48,410 --> 00:01:51,793
따라서 저는 이것을 실행할 것입니다.

28
00:01:51,793 --> 00:01:55,400
잠시만요, 제가 잘못 표기한 것 같아요. module, 오 예스,

29
00:01:55,400 --> 00:01:59,720
저는 한 가지를 잊었는데 여러분이 알려주셔야 합니다.

30
00:02:01,110 --> 00:02:05,470
GraphLab Create에서, 모델을 생성하기 위해 여러분이 사용할 수 있는 동사는 creat입니다.

31
00:02:05,470 --> 00:02:07,747
logistic regression을 GraphLab 하세요.

32
00:02:07,747 --> 00:02:11,400
그러면 logistic_classifier.create은 분류법을 생성할 것입니다.

33
00:02:11,400 --> 00:02:13,710
이제, 이것은 실행되어야 합니다.

34
00:02:13,710 --> 00:02:17,546
우리는 raw 이미지 픽셀을 사용해서 분류법을 구축합니다.

35
00:02:17,546 --> 00:02:22,470
그리고 저는 그것이 매우 좋을 것이라고 기대하지 않죠.

36
00:02:22,470 --> 00:02:24,670
하지만 일단 해보도록 하죠.

37
00:02:24,670 --> 00:02:27,400
이것은 방금 막 완료되었습니다.

38
00:02:29,360 --> 00:02:33,890
그럼 이것이 어떤 성과를 내는지 한번 지켜보죠.

39
00:02:33,890 --> 00:02:37,850
첫 번째로 제가 하게 될 것은 모델을 가지고 예측값을 생성하는 것입니다.

40
00:02:39,030 --> 00:02:44,736
그럼 raw 이미지 기반의 단순한 모델을 가지고

41
00:02:44,736 --> 00:02:51,039
#Make a prediction을 해보죠.

42
00:02:53,941 --> 00:02:57,698
저는 테스트 데이터 세트에서 특정 이미지들을 가져와서

43
00:02:57,698 --> 00:03:01,450
분류법이 그것들을 뭐라고 정의하는지 볼 것입니다.

44
00:03:01,450 --> 00:03:07,880
저는 image_test라고 말할 것이고, 이제 처음 3개 이미지들을 살펴보죠.

45
00:03:07,880 --> 00:03:11,940
이미지 0:3은 이미지 0, 1, 그리고 2로 갑니다.

46
00:03:11,940 --> 00:03:16,930
저는 그저 이 이미지들을 살펴볼 것입니다.

47
00:03:16,930 --> 00:03:22,358
그리고 저는 .show()를 그것들에 타입해서 이 이미지들이 무엇인지 여러분에게 보여 줄 것입니다.

48
00:03:22,358 --> 00:03:24,656
여기 있습니다.

49
00:03:24,656 --> 00:03:31,420
이미지들은 제가 말했듯이, 데이터 세트에서 좀 작습니다.

50
00:03:31,420 --> 00:03:37,140
하지만 저는 이것을 여러분들이 볼 수 있게 크게 만들 것입니다. 이미지들은 고양이,

51
00:03:37,140 --> 00:03:39,250
자동차, 그리고 또 다른 고양이입니다.

52
00:03:39,250 --> 00:03:40,340
2마리의 고양이와 자동차네요.

53
00:03:40,340 --> 00:03:41,390
자동차, 고양이, 아닙니다.

54
00:03:41,390 --> 00:03:42,880
고양이, 자동차, 고양이이죠.

55
00:03:42,880 --> 00:03:49,780
그리고 저는 폰트를 크게 유지할 것입니다. 우리가 실제로 결과를 볼 수 있도록 말이죠.

56
00:03:49,780 --> 00:03:53,170
이제, 이 이미지에 대한 레이블을 살펴보죠.

57
00:03:53,170 --> 00:03:55,510
이것은 테스트 데이터입니다.

58
00:03:55,510 --> 00:04:01,570
이것은 요소 0부터 3까지인데, 첫 번째 것은 3입니다.

59
00:04:01,570 --> 00:04:06,910
저는 시각적으로 이것이 고양이, 자동차, 고양이라고 했지만, 이제 실제 레이블을 살펴보죠.

60
00:04:06,910 --> 00:04:14,320
레이블 칼럽에서 여러분은 고양이, 오토모빌, 고양이를 볼 수 있을 것입니다.

61
00:04:14,320 --> 00:04:17,330
자동차가 아니고 오토모빌이네요. 하지만 결국 같은 것입니다.

62
00:04:17,330 --> 00:04:21,632
그럼 이제 이 raw_pixe_model이 

63
00:04:21,632 --> 00:04:26,700
무엇을 예측하는지 보죠.

64
00:04:26,700 --> 00:04:32,345
이 3개 이미지들의 데이터 세트에서 이것이 무엇을 예측하는지 알아보겠습니다.

65
00:04:32,345 --> 00:04:39,400
따라서 0:3에 대한 image_test를 실행합니다.

66
00:04:39,400 --> 00:04:43,810
여기에서 사실값은 고양이, 오토모빌, 고양이지만 이것은 새, 고양이, 새를 예측합니다.

67
00:04:43,810 --> 00:04:47,355
이것은 3가지 모두를 잘 못 파악했네요. 고양이를 새로 착각했나봅니다.

68
00:04:47,355 --> 00:04:52,030
이것은 자동차를 고양이로 생각했고 다른 고양이를 또한 새로 생각했습니다.

69
00:04:52,030 --> 00:04:56,520
따라서 이것은 모두 오답입니다. 하지만 이것은 단지 fluke qualitative일 뿐입니다.

70
00:04:56,520 --> 00:04:59,880
처음 몇 개의 이미지들만 착각했을수도 있죠. 그러면

71
00:04:59,880 --> 00:05:02,870
이제 실제 예측값들에 대해서 한번 살펴보죠.

72
00:05:04,300 --> 00:05:07,990
그럼 이제 테스트 데이터의 모델을 평가하고

73
00:05:07,990 --> 00:05:12,710
실제 분류법의 정확도롤 살펴보겠습니다.

74
00:05:12,710 --> 00:05:18,524
테스트 데이터의 모델에 #Evaluating raw pixel을 적용합니다.

75
00:05:18,524 --> 00:05:24,717
저는 이 raw_pixel_model을 가져갈 것이고

76
00:05:24,717 --> 00:05:28,946
evaluate을 호출할 것입니다. 그리고

77
00:05:28,946 --> 00:05:33,628
evaluate이 하는 것은

78
00:05:33,628 --> 00:05:40,576
이런 에러들과 에러 매트릭스들을 계산하는 것이죠.

79
00:05:40,576 --> 00:05:44,673
그리고 저는 테스트 세트를 사용할 것입니다.

80
00:05:44,673 --> 00:05:51,349
그리고 여러분은 여기에서 정확도가 고작 46.8%밖에 되지 않는다는 것을 알게되죠.

81
00:05:51,349 --> 00:05:52,720
형편없네요.

82
00:05:52,720 --> 00:05:57,280
여러분은 4개의 종류를 가지고 있습니다. 랜덤 추축 확률은 25%죠. 밸랜스가 잡혀있습니다.

83
00:05:57,280 --> 00:05:59,570
이것은 여기에서 46%를 가집니다. 그리 기대에는 못미치네요.

84
00:06:00,660 --> 00:06:03,670
거기에는 좀 더 구체적인 내용이 있습니다.

85
00:06:03,670 --> 00:06:05,670
confusion 매트릭스는가 구성되었습니다.

86
00:06:05,670 --> 00:06:09,594
저는 이것에 대해 설명하진 않을 것이지만 집에서 여러분은 이것들에 대해 좀 더 알아볼 수 있습니다.

87
00:06:09,594 --> 00:06:11,312
하지만 46%는 기억하세요.

88
00:06:11,312 --> 00:06:14,929
[음악]