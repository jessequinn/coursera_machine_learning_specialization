1
00:00:00,000 --> 00:00:03,569
[음악]

2
00:00:03,569 --> 00:00:09,379
이제 관건은 딥 특징을 통해

3
00:00:09,379 --> 00:00:14,640
모델을 향상시킬 수 있는지입니다

4
00:00:14,640 --> 00:00:17,340
딥 특징 기억하시죠

5
00:00:17,340 --> 00:00:22,650
딥러닝 모듈에서 꽤 자세히 다뤘는데

6
00:00:22,650 --> 00:00:26,900
딥 특징은 전이 학습이란 기법으로
어느 한 영역에서 학습한 특징을

7
00:00:26,900 --> 00:00:31,400
다른 영역의 이미지에 적용해서

8
00:00:31,400 --> 00:00:34,330
적은 양의 라벨 데이터만 주어져도
학습을 가능하게 합니다

9
00:00:34,330 --> 00:00:39,883
감 잡기 위해 훈련 데이터의 길이를 보면

10
00:00:39,883 --> 00:00:44,973
이미지가 2000장인데

11
00:00:44,973 --> 00:00:47,489
꽤 작은 데이터 세트라고 할 수 있죠

12
00:00:47,489 --> 00:00:52,089
이제 살펴보면서 훈련 이미지 2000장과

13
00:00:52,089 --> 00:00:57,394
딥 특징만 가지고 뭘 할 수 있는지 봅니다

14
00:00:57,394 --> 00:01:01,110
순서는 이렇습니다

15
00:01:01,110 --> 00:01:07,678
미리 훈련된 모델인

16
00:01:07,678 --> 00:01:11,825
deep_learning_model를

17
00:01:11,825 --> 00:01:20,830
graphlab.load_model로 불러옵니다

18
00:01:20,830 --> 00:01:26,410
이미지넷 데이터를 불러옵니다

19
00:01:26,410 --> 00:01:27,710
여깄습니다

20
00:01:27,710 --> 00:01:31,934
imagenet_model이라 이름짓죠

21
00:01:31,934 --> 00:01:37,860
모델에 150만장의 이미지와

22
00:01:37,860 --> 00:01:40,105
천 개의 카테고리, 다양한 데이터 세트

23
00:01:40,105 --> 00:01:44,243
150만개의 이미지와 AlexNet 모델입니다

24
00:01:44,243 --> 00:01:49,350
2012년 이미지넷 대회에서
놀라운 정확도를 보였는데

25
00:01:49,350 --> 00:01:54,090
모델을 미리 훈련시키고 이를 통해

26
00:01:55,240 --> 00:01:59,240
deep_feature라는

27
00:01:59,240 --> 00:02:04,380
새로운 열을 만듭니다

28
00:02:04,380 --> 00:02:08,804
이 열에 방금 불러온

29
00:02:08,804 --> 00:02:12,900
deep_learning_model을 넣습니다

30
00:02:14,280 --> 00:02:17,100
deep_learning_model

31
00:02:17,100 --> 00:02:23,123
extract_features를 호출할 텐데

32
00:02:23,123 --> 00:02:29,680
딥 특징을 추출하는 함수죠

33
00:02:29,680 --> 00:02:33,420
전이 학습, 즉 어느 한 영역에서
학습된 특징을

34
00:02:33,420 --> 00:02:35,690
데이터 세트의 다른 영역에 적용합니다

35
00:02:35,690 --> 00:02:38,560
데이터 세트는 이미지 훈련 데이터죠

36
00:02:40,820 --> 00:02:42,890
이게 입력해야 하는 두 명령어입니다

37
00:02:42,890 --> 00:02:44,300
간단하죠

38
00:02:44,300 --> 00:02:47,960
잘 보이도록 폰트 크기를 줄입니다

39
00:02:47,960 --> 00:02:52,990
전이 학습을 하기 위한 명령어 둘입니다

40
00:02:52,990 --> 00:02:55,670
이미지넷의 신경망 훈련 데이터를

41
00:02:55,670 --> 00:02:57,822
CIFAR-10 데이터 세트에 적용합니다

42
00:02:57,822 --> 00:03:02,860
딥 특징 계산은 몇 분쯤 걸리는데

43
00:03:02,860 --> 00:03:07,030
지금 하지는 않을 겁니다

44
00:03:07,030 --> 00:03:11,040
대신에

45
00:03:12,040 --> 00:03:14,530
image_train에서

46
00:03:15,960 --> 00:03:20,730
먼저 헤드, 처음 몇 줄을 보여드리죠

47
00:03:20,730 --> 00:03:26,550
이미지 ID, 보고 있는 이미지,

48
00:03:26,550 --> 00:03:30,490
라벨, 딥 특징 열도 있습니다

49
00:03:30,490 --> 00:03:33,130
미리 계산해서 SFrame에 저장해뒀습니다

50
00:03:33,130 --> 00:03:35,040
So it's already saved and precomputed.
미리 계산 후 저장됐습니다

51
00:03:35,040 --> 00:03:38,070
image_array란 열도 있는데

52
00:03:38,070 --> 00:03:39,550
픽셀 모델 훈련시킬 때 썼던 겁니다

53
00:03:39,550 --> 00:03:41,610
deep_features는 이미 있지만

54
00:03:41,610 --> 00:03:44,340
두 명령어를 실행하면 데이터 세트에서

55
00:03:44,340 --> 00:03:46,800
직접 계산해볼 수 있습니다

56
00:03:46,800 --> 00:03:50,114
이제 딥 특징이

57
00:03:50,114 --> 00:03:55,635
생겼습니다

58
00:03:55,635 --> 00:03:59,881
딥 모델을 훈련시키죠

59
00:03:59,881 --> 00:04:04,303
딥 특징이 주어졌으니

60
00:04:04,303 --> 00:04:08,400
분류기를 훈련시킵니다

61
00:04:08,400 --> 00:04:13,010
이제 딥 특징을 통해
간단한 분류기를 훈련시킵니다

62
00:04:13,010 --> 00:04:20,620
deep_features_model이라 부르죠

63
00:04:20,620 --> 00:04:25,032
deep_features_model에도
로지스틱 회귀를 호출합니다

64
00:04:25,032 --> 00:04:29,113
강의 내용을 기억하시면 이 딥 특징들을

65
00:04:29,113 --> 00:04:33,256
마지막에 간단한 분류기에 집어넣게 되죠

66
00:04:33,256 --> 00:04:35,321
이 경우 로지스틱 회귀입니다

67
00:04:35,321 --> 00:04:36,912
입력은 image_train_data이 됩니다

68
00:04:36,912 --> 00:04:40,112
특징으로는

69
00:04:40,112 --> 00:04:45,512
픽셀이 아닌

70
00:04:45,512 --> 00:04:52,118
deep_features를 사용합니다

71
00:04:55,274 --> 00:04:59,726
마지막으로 예측하고자 하는 대상은

72
00:04:59,726 --> 00:05:04,421
라벨 열입니다

73
00:05:06,981 --> 00:05:07,678
다 됐습니다

74
00:05:07,678 --> 00:05:12,483
이제 분류기를 학습시키는데 끝났네요

75
00:05:12,483 --> 00:05:16,233
이미지 2000장과 2012년 딥러닝 대회에서 우승한

76
00:05:16,233 --> 00:05:20,558
딥 신경망에서 계산된

77
00:05:20,558 --> 00:05:24,980
특징만을 사용했습니다

78
00:05:24,980 --> 00:05:29,960
이제 모델을 탐색하고 데이터에 적용합니다

79
00:05:29,960 --> 00:05:35,788
이제 할 건

80
00:05:35,788 --> 00:05:40,993
딥 특징 모델을 테스트 세트의

81
00:05:40,993 --> 00:05:47,940
처음 몇 이미지에 적용하기

82
00:05:47,940 --> 00:05:51,330
픽셀 모델에서 했던 것처럼 적용합니다

83
00:05:51,330 --> 00:05:58,580
image_test 데이터에서
처음 세 이미지를 봅니다

84
00:05:58,580 --> 00:06:00,170
0,1,2이죠

85
00:06:00,170 --> 00:06:03,820
이런 모습들입니다

86
00:06:03,820 --> 00:06:06,647
.show를 입력하면

87
00:06:06,647 --> 00:06:12,310
고양이, 차, 고양이가 있었죠

88
00:06:13,700 --> 00:06:22,490
이제 뭐라고 예측하나 봅시다

89
00:06:22,490 --> 00:06:27,747
deep_feature_model로

90
00:06:27,747 --> 00:06:33,137
세 이미지를 예측합니다

91
00:06:33,137 --> 00:06:36,256
image_test[0:3]

92
00:06:36,256 --> 00:06:38,860
고양이, 차, 고양이인데

93
00:06:38,860 --> 00:06:42,830
고양이, 자동차, 고양이라고 하네요

94
00:06:42,830 --> 00:06:44,880
세 개 모두 맞췄습니다

95
00:06:44,880 --> 00:06:45,830
훌륭하네요

96
00:06:45,830 --> 00:06:49,930
픽셀만으론 성능이 아주 나빴는데

97
00:06:49,930 --> 00:06:55,570
딥 특징을 함께 사용하니
다 맞췄습니다

98
00:06:55,570 --> 00:07:00,719
딥 모델을 공식적으로 평가하죠

99
00:07:00,719 --> 00:07:07,275
deep_features_model에서

100
00:07:07,275 --> 00:07:12,302
test_data의

101
00:07:12,302 --> 00:07:17,991
정확도를 계산합니다

102
00:07:17,991 --> 00:07:18,503
됐지요

103
00:07:18,503 --> 00:07:22,630
어떻게 할까요?

104
00:07:22,630 --> 00:07:25,450
픽셀 모델에서 했던 것처럼

105
00:07:25,450 --> 00:07:27,480
evaluate 함수를 호출합니다

106
00:07:27,480 --> 00:07:29,440
evaluate를 붙입니다

107
00:07:29,440 --> 00:07:32,702
입력으로 테스트 데이터를 줍니다

108
00:07:32,702 --> 00:07:33,562
image_test죠

109
00:07:35,205 --> 00:07:39,290
And remember the raw pixel
픽셀 모델은 46% 정확도였죠

110
00:07:39,290 --> 00:07:40,450
아주 낮았습니다

111
00:07:41,660 --> 00:07:46,830
딥 특징을 쓰니 78% 정확도가 나오네요
꽤 좋습니다

112
00:07:46,830 --> 00:07:48,720
이게 지금으로선 최고에 가깝습니다

113
00:07:48,720 --> 00:07:52,697
데이터를 더 학습시켜야 하긴 하지만
46%보다는 훨씬 낫습니다

114
00:07:52,697 --> 00:07:56,132
딥 특징을 쓰면 데이터를 조금만 더해도

115
00:07:56,132 --> 00:08:01,286
이미지 분류 작업에서

116
00:08:01,286 --> 00:08:05,527
상당히 높은 정확도를 보여주죠

117
00:08:05,527 --> 00:08:06,027
[음악]