1
00:00:00,000 --> 00:00:04,246
[음악]

2
00:00:04,246 --> 00:00:08,890
오류와 정확도로 분류기를 평가하는 법을
배워봤습니다

3
00:00:08,890 --> 00:00:12,770
분류기의 정확도와 오류에 대한

4
00:00:12,770 --> 00:00:14,800
이해가 중요합니다

5
00:00:14,800 --> 00:00:18,467
좋은 오류, 정확도 수준이 어느 정도인지

6
00:00:18,467 --> 00:00:21,760
끊임없이 고민해야 합니다

7
00:00:21,760 --> 00:00:26,830
흔한 실수 중 하나는

8
00:00:26,830 --> 00:00:32,340
분류의 성능이 얼마나 좋은가?

9
00:00:32,340 --> 00:00:33,770
분류기를 만들 때

10
00:00:33,770 --> 00:00:38,590
첫 기준점으로 삼을 건 찍기입니다

11
00:00:38,590 --> 00:00:42,926
예를 들어 이와 같이 긍정 또는 부정의

12
00:00:42,926 --> 00:00:46,694
이진 분류가 있다고 하면

13
00:00:46,694 --> 00:00:51,689
찍기로는 평균 50%의 정확도일테니
적어도 50%는 넘어야 합니다

14
00:00:51,689 --> 00:00:54,765
k 클래스라면, 예를 들어 클래스가 3개라면

15
00:00:54,765 --> 00:00:59,525
찍기의 정확도는 33%죠

16
00:00:59,525 --> 00:01:04,307
4 클래스면 25%, k 클래스면 1/k가 됩니다

17
00:01:04,307 --> 00:01:11,669
그러니 적어도 찍기보단 훨씬 나아야죠

18
00:01:11,669 --> 00:01:15,870
그렇지 않으면 별 가치가 없습니다

19
00:01:15,870 --> 00:01:20,197
찍기를 나은 건 그렇다치고
분류를 정말 잘하고 있는지,

20
00:01:20,197 --> 00:01:24,750
의미가 있을 정도로 잘하는지 깊이
고민해봐야 합니다

21
00:01:24,750 --> 00:01:29,991
예를 들어 스팸 예측이 90% 정확도라고 합시다

22
00:01:29,991 --> 00:01:31,174
자랑스러운 일인가요?

23
00:01:31,174 --> 00:01:32,776
그렇게 놀라운가요?

24
00:01:32,776 --> 00:01:34,436
때에 따라서 다릅니다

25
00:01:34,436 --> 00:01:41,173
스팸의 경우 별로 그렇지 않죠
2010년의 데이터에 따르면 전체 이메일의

26
00:01:41,173 --> 00:01:46,250
90%는 스팸이라고 합니다
90%요

27
00:01:46,250 --> 00:01:50,998
그렇다면 모든 이메일을 스팸이라고 가정하면
정확도가 어떻게 되죠?

28
00:01:50,998 --> 00:01:51,784
90%죠

29
00:01:53,420 --> 00:01:56,910
다중 클래스 예측이라고 불리는 문제인데

30
00:01:56,910 --> 00:01:59,490
단순히 가장 흔한 클래스를 예측하는 것이죠

31
00:01:59,490 --> 00:02:03,500
클래스 불균형이 있을 때

32
00:02:03,500 --> 00:02:04,470
굉장한 성능을 낼 수 있습니다

33
00:02:04,470 --> 00:02:07,920
한 클래스가 다른 클래스들보다 월등히
많이 나타나는 현상이죠

34
00:02:07,920 --> 00:02:12,025
스팸은 일반 메일보다 훨씬 그 수가 많습니다

35
00:02:13,060 --> 00:02:17,950
그러므로 정확도가 높은지 판단할 때

36
00:02:17,950 --> 00:02:20,720
클래스 불균형을 자세히 살펴야 하는 것이죠

37
00:02:21,940 --> 00:02:23,730
물론 이 접근법도

38
00:02:23,730 --> 00:02:29,070
다중 클래스가 뭔지 안다면 찍기보다 낫습니다

39
00:02:29,070 --> 00:02:31,850
문제를 깊게 파고들어가서 지금 나오는

40
00:02:31,850 --> 00:02:36,390
예측이 어떤 것인지, 정확도가 문제에

41
00:02:36,390 --> 00:02:39,940
적합할 정도로 높은가 고민해야 합니다

42
00:02:39,940 --> 00:02:44,543
스스로에게 물어보죠
클래스 불균형이 있나?

43
00:02:44,543 --> 00:02:47,476
찍기와 같은 기준점 접근법,

44
00:02:47,476 --> 00:02:50,300
다중 클래스 등에 비교했을 때 성능은 어떤지?

45
00:02:50,300 --> 00:02:53,190
가장 중요한 건, 프로그램에서

46
00:02:53,190 --> 00:02:58,590
사용자를 만족시킬 정확도가 나오는가?

47
00:02:58,590 --> 00:03:03,178
스팸 필터링의 정확도가 낮으면 중요한 메시지가

48
00:03:03,178 --> 00:03:06,974
스팸 폴더로 들어갈텐데 아주 피해야 하는 일이죠

49
00:03:06,974 --> 00:03:10,819
[음악]