1
00:00:00,358 --> 00:00:05,604
[背景音乐]
翻译: RyukaSuu |审阅: 19waa
Coursera Global Translator Community

2
00:00:05,604 --> 00:00:09,683
现在 我们来讨论一下
如何使用精度和召回率的这些度量

3
00:00:09,683 --> 00:00:14,200
来比较我们可能会使用的不同算法

4
00:00:15,880 --> 00:00:20,190
为了进行比较 我们可以画一个
叫做精度-召回率曲线的东西

5
00:00:20,190 --> 00:00:25,518
首先我们来讲一下这些曲线代表的是什么

6
00:00:25,518 --> 00:00:30,074
以及在特定的推荐系统中曲线代表什么

7
00:00:30,074 --> 00:00:34,916
我希望你们做的是对推荐系统设立不同的阈值

8
00:00:34,916 --> 00:00:39,586
改变系统可以给我推荐的数量

9
00:00:39,586 --> 00:00:44,458
我会进行排列 比如说
对亚马逊上所有的婴儿产品排列

10
00:00:44,458 --> 00:00:49,334
并且我想要你们只推荐一件或者两件或者三件等等

11
00:00:49,334 --> 00:00:51,772
这就是你们要改变的阈值

12
00:00:51,772 --> 00:00:54,880
这些都是沿着曲线能找到的

13
00:00:54,880 --> 00:00:57,270
在最优推荐的地方曲线会是什么样呢

14
00:00:57,270 --> 00:01:01,210
也就是只推荐我喜欢的产品的时候
曲线会是什么样呢?

15
00:01:02,740 --> 00:01:07,450
只推荐一件产品的时候精度是多少?

16
00:01:07,450 --> 00:01:11,970
我们知道推荐的这件是我喜欢的
所以精度是

17
00:01:11,970 --> 00:01:18,520
我的所有只是这一件产品而且我喜欢它
所以我的精度是1

18
00:01:18,520 --> 00:01:21,700
那么我的召回率是多少呢?

19
00:01:21,700 --> 00:01:25,590
如果我有十件喜欢的东西

20
00:01:26,730 --> 00:01:30,550
而结果只覆盖了其中的一件 所以召回率是1/10

21
00:01:30,550 --> 00:01:35,650
同样地 随着我增加物品的数量

22
00:01:35,650 --> 00:01:39,620
我的精度始终保持为1

23
00:01:39,620 --> 00:01:43,090
我只推荐我喜欢的产品 但是

24
00:01:43,090 --> 00:01:48,420
召回率在增加 
因为推荐的物品更多地覆盖了我喜欢的物品

25
00:01:48,420 --> 00:01:55,256
所以最终我们会达到1
1这个点

26
00:01:55,256 --> 00:02:01,366
所以最优的精度-召回率曲线是这条线

27
00:02:01,366 --> 00:02:04,970
好了 我们再讨论一下
另一个真实的推荐系统的曲线

28
00:02:04,970 --> 00:02:07,270
可能会是什么样子

29
00:02:08,800 --> 00:02:16,121
在这之前 我要先注释一下
这是我们的最优推荐系统

30
00:02:20,174 --> 00:02:23,714
现在 我们来看一下一个更真实的推荐系统

31
00:02:23,714 --> 00:02:25,002
会是什么样子

32
00:02:25,002 --> 00:02:29,927
好了 我们推荐的第一个产品可能不是我喜欢的

33
00:02:29,927 --> 00:02:34,397
也可能是 所以曲线要从精度轴上的某处开始

34
00:02:34,397 --> 00:02:38,615
最终在阈值足够大的某个点

35
00:02:38,615 --> 00:02:43,050
可能会在某个点
系统能够推荐给我喜欢的产品

36
00:02:43,050 --> 00:02:46,651
所以 精度和召回率都会增加

37
00:02:46,651 --> 00:02:51,540
然后可能会发生增加我不喜欢的产品这种情况

38
00:02:52,914 --> 00:02:58,500
所以 在这个点发生了什么
我的召回率保持着不变

39
00:02:58,500 --> 00:03:03,560
因为没有覆盖到更多我感兴趣的物品

40
00:03:03,560 --> 00:03:06,590
但是我的精度降低了
因为我在关注更广的世界

41
00:03:06,590 --> 00:03:08,530
绿框中的更大的系列

42
00:03:08,530 --> 00:03:13,580
所以我的精度直线下降
但是我的召回率保持不变

43
00:03:14,660 --> 00:03:20,060
你可能会得到这种锯齿状的曲线 或者

44
00:03:20,060 --> 00:03:26,900
这种精度下降的曲线
然后是这种精度和召回率上升的曲线

45
00:03:26,900 --> 00:03:30,360
我会画出来 可能不完全准确 但是

46
00:03:30,360 --> 00:03:31,790
大概看起来是这样的

47
00:03:33,810 --> 00:03:37,968
这种就是典型的精度-召回率曲线

48
00:03:37,968 --> 00:03:41,850
好了 这是一个更加真实的系统的例子

49
00:03:45,630 --> 00:03:51,128
这是不同于我们的最优系统的另一种推荐系统

50
00:03:51,128 --> 00:03:56,245
好了 我们已经知道了如何绘制精度-召回率曲线

51
00:03:56,245 --> 00:04:00,950
那么我们来比较一下不同的算法
我们要如何知道哪个是最好的呢?

52
00:04:03,590 --> 00:04:06,610
我们知道我们希望的是精度和

53
00:04:06,610 --> 00:04:11,750
召回率都尽量地大
最好的情况会是什么样的呢?

54
00:04:11,750 --> 00:04:15,160
我们讲最优的推荐是那条曲线

55
00:04:16,470 --> 00:04:20,920
但是随后当我们看其他这些锯齿状的曲线时

56
00:04:21,920 --> 00:04:24,480
一项并不一定完全地控制另一项

57
00:04:24,480 --> 00:04:27,760
它们在不同的点可能在做不同的事

58
00:04:27,760 --> 00:04:31,580
所以 一条曲线是不必要的
让我擦掉它

59
00:04:31,580 --> 00:04:33,880
并且用另一种颜色画出来使之更清楚些

60
00:04:36,580 --> 00:04:39,500
不是说这个就比另一个更好

61
00:04:43,910 --> 00:04:46,304
也许我们会在这里有另一条曲线

62
00:04:49,581 --> 00:04:54,025
所以 在这个例子中 我如何考虑比较这些

63
00:04:54,025 --> 00:04:58,877
不同的算法 并且选择最好的一个呢?

64
00:04:58,877 --> 00:05:03,920
正如我所说的 我们希望精度和召回率尽可能得大

65
00:05:03,920 --> 00:05:07,683
我们可以度量的一件事情是笼统得比较一下

66
00:05:07,683 --> 00:05:12,910
哪个比另一个更好
那么主要的思路是什么呢?

67
00:05:13,930 --> 00:05:18,280
我们可以考虑一下曲线下方的面积

68
00:05:18,280 --> 00:05:24,128
比如说 我们可以观察一下蓝色曲线下方的整个这片区域

69
00:05:27,866 --> 00:05:33,136
举个例子 我们可以将之与

70
00:05:33,136 --> 00:05:40,638
绿色曲线下的区域比较

71
00:05:40,638 --> 00:05:45,926
可以知道哪个面积更大

72
00:05:45,926 --> 00:05:48,660
这是一个代理

73
00:05:48,660 --> 00:05:54,276
由此推荐系统能够做出更好的工作

74
00:05:54,276 --> 00:05:57,040
这就是关键

75
00:05:57,040 --> 00:06:02,222
我们可以采用的一种度量是曲线下方的面积

76
00:06:02,222 --> 00:06:08,240
它度量的正式我在下方画出来的这个

77
00:06:08,240 --> 00:06:12,330
但是你可能不关心推荐系统是如何

78
00:06:12,330 --> 00:06:15,920
穿越所有可能的表现情景的

79
00:06:15,920 --> 00:06:19,670
相反 我们假设 你可能会处在一个拥有网页的情景中

80
00:06:19,670 --> 00:06:25,090
基于页面上的不动产 你知道你可以展示多少件物品

81
00:06:25,090 --> 00:06:30,091
因此 你可能会向使用者推荐10件不同的物品

82
00:06:30,091 --> 00:06:34,436
或者 你知道通常来说使用者的关注范围是什么

83
00:06:34,436 --> 00:06:38,140
并且 你希望把推荐的产品限制在多少范围内
比如到20项

84
00:06:38,140 --> 00:06:39,805
像这样

85
00:06:39,805 --> 00:06:41,385
所以 在这些案例中

86
00:06:41,385 --> 00:06:45,705
你明确的知道你会推荐多少产品

87
00:06:45,705 --> 00:06:52,310
你关心的是在这个推荐产品数量下你的精度是多少

88
00:06:52,310 --> 00:06:56,410
因为在推荐产品数目的限制下

89
00:06:56,410 --> 00:06:59,970
你希望精度越大越好

90
00:06:59,970 --> 00:07:03,979
这是使用精度和召回率的概念来比较不同算法的时候

91
00:07:03,979 --> 00:07:08,754
你可能会用到的度量方法的例子

92
00:07:08,754 --> 00:07:12,629
[背景音乐]
翻译: RyukaSuu |审阅: 19waa
Coursera Global Translator Community