[背景音乐]
翻译: RyukaSuu |审阅: 19waa
Coursera Global Translator Community 很好，所以这是我们的数据 那我们下一步要创建一个推荐系统 那么我们开始吧 让我们马上开始搭建一个歌曲推荐系统 照例，我们一开始要划分训练数据和测试数据 因此我们定义train_data时 数据已经被分成了训练数据和测试数据 而划分的方法是将音乐数据 随机地划分开来，其中训练数据占80% 测试数据占20% 还有 别忘了把这个量归零 这样你在家自己计算的时候就会得到完全一样的结果了 好了 我们完成了划分 我们现在准备好要训练一些推荐器的模型了 因此只需要按照艾米丽之前讲到的 我们第一个训练的推荐器模型是 一个简单的基于流行程度的推荐系统 这是很多网站用到的 比如说 当他们说 这是最多邮件转发的故事或者这是购买量最大的产品， 或者这是今天推特上最流行最常用的标签 这并不是一个特别好的模型 但是它非常常用 好的 让我们来训练这个著名的基于流行度的模型吧 我把它命名为popularity_model 我现在只需要调用graphlab.popularity_recommender 这是一个专有的推荐系统 我尝试在它下面调用create 如果 你还记得的话 create在这里是用来创建推荐系统的动词 然后 我将把我的训练数据作为输入量 这个模型会读入一些信息 那么让我来一步步展示给你看 你需要指出数据库中的那一列是用户名 在我们这个例子中那一列就叫做user_id 用户名 接着我们需要指明条目名 而条目名 或者我们例子中的产品名 也就是用户和产品 但是我们的条目并不是严格意义上的产品 这里我们的条目是歌曲 因此条目名等于歌曲名 那我现在按回车 它会很快创建 一个简单的基于流行度的推荐系统 现在让我们来做预测 那下一步我们用， 让我把鼠标向下滚动一下 我们用流行度模型来 做一些预测 比如说我们用这个流行度模型来 对一个特定用户进行推荐 那么我要推荐一些这个用户喜欢的歌曲 因此 这个推荐器函数会提取一些用户 而我们现在就给它提供其中一个用户 如果你记得的话 我们有一个用户列表 我就把那个用户列表的第一个人输入函数并运行 那么你会给这个人推荐什么呢 一首Harmonia的歌 一首比约克的 一首里昂王朝的，等等 那么现在仔细看一下这个结果 这里的约卡姆是推荐给零号用户的 现在我们看看这个模型给一号用户推荐的是什么 我们再用这个流行度模型 我再调用一次这个推荐系统，给它一组用户 这一次 我不用零号用户 而是用一号用户 现在在我按回车之前 先停下来想一想 我从这个流行度模型中会得到什么结果呢？ 嗯 每个人都会被推荐完全一样的东西。 因为我们只是推荐了最流行的歌曲 因此这个人也会被推荐Harmonia 比约克 德怀特约卡姆 里昂王朝 基本上 这并不很有趣 因为所有人都得到了相同的推荐 这是这个模型的一个问题 [背景音乐]
翻译: RyukaSuu |审阅: 19waa
Coursera Global Translator Community