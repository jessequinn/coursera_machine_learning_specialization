1
00:00:00,000 --> 00:00:03,035
[MUSIC]

2
00:00:03,035 --> 00:00:06,560
Good, so this is our data set.

3
00:00:06,560 --> 00:00:11,320
Then the next step for
us is to create a recommender system.

4
00:00:11,320 --> 00:00:14,030
So, here we go.

5
00:00:16,420 --> 00:00:23,180
Let's go ahead and
create a song recommender.

6
00:00:25,580 --> 00:00:29,920
So as usual, we're gonna start
by doing a train test split.

7
00:00:29,920 --> 00:00:35,076
So when I take the train_data, the data
is splitted into train and test data.

8
00:00:35,076 --> 00:00:39,642
And we do that by taking the song data,

9
00:00:39,642 --> 00:00:46,921
we're going to do a random split
on this data set of 80% for

10
00:00:46,921 --> 00:00:50,942
training, 20% for testing.

11
00:00:50,942 --> 00:00:53,882
And again when we're gonna
set this to zero, so

12
00:00:53,882 --> 00:00:58,009
that if you do this at home you'll
get the exact same answers I got.

13
00:00:59,490 --> 00:01:00,970
Okay, we've done that split.

14
00:01:00,970 --> 00:01:05,690
And now we're ready to train
some recommender models.

15
00:01:05,690 --> 00:01:12,153
So just following the lecture
a little bit that Emily gave,

16
00:01:12,153 --> 00:01:17,195
the first recommender
model that we're gonna

17
00:01:17,195 --> 00:01:22,900
train is a simple
popularity-based recommender.

18
00:01:24,210 --> 00:01:27,470
So this is what many websites do,
for example, when they

19
00:01:27,470 --> 00:01:31,270
say here are the most email stories or
this is the most purchased products,

20
00:01:31,270 --> 00:01:35,200
this is what's most popular, and
most common hashtags on Twitter today.

21
00:01:36,450 --> 00:01:39,234
Not a particularly great model,
but it's used a lot.

22
00:01:39,234 --> 00:01:44,810
So, let's train our
famous popularity model.

23
00:01:44,810 --> 00:01:46,850
I'm gonna call it popularity_model.

24
00:01:46,850 --> 00:01:53,060
And all I have to do now is call
graphlab.popularity_recommender.

25
00:01:53,060 --> 00:01:55,930
So this is a particular recommender.

26
00:01:55,930 --> 00:01:58,820
And I tried create next to it, and

27
00:01:58,820 --> 00:02:02,900
as you remember, create is the verb here
that actually creates the recommender.

28
00:02:04,370 --> 00:02:10,130
And, I'm gonna give it my
training data as input.

29
00:02:12,700 --> 00:02:17,720
And this model takes
a little bit of information.

30
00:02:17,720 --> 00:02:19,530
So let me just walk you through it.

31
00:02:19,530 --> 00:02:25,180
You have to say what column is
the user_id in the dataset.

32
00:02:25,180 --> 00:02:29,690
So in our case that column
is called just user_id.

33
00:02:29,690 --> 00:02:32,840
User_id.

34
00:02:32,840 --> 00:02:37,795
Then we need to say what
column is the item_id.

35
00:02:40,358 --> 00:02:45,320
So the item_id is, in our case
the product, so users and products.

36
00:02:45,320 --> 00:02:48,000
But we don't have exactly
a product in our item.

37
00:02:48,000 --> 00:02:49,584
Our item here is songs.

38
00:02:49,584 --> 00:02:55,880
So item_id is equal to song, and
now when I hit Enter, it creates,

39
00:02:55,880 --> 00:03:02,310
and it was very quick, created a simple
popularity based recommender system.

40
00:03:02,310 --> 00:03:05,060
So let's just make some predictions.

41
00:03:05,060 --> 00:03:12,168
So, in our next step, we're going to use,

42
00:03:12,168 --> 00:03:18,135
I'll just scroll down a little bit.

43
00:03:18,135 --> 00:03:22,762
Use the popularity model to

44
00:03:22,762 --> 00:03:26,993
make some predictions.

45
00:03:29,938 --> 00:03:34,852
So for example let's take
this popularity model and

46
00:03:34,852 --> 00:03:39,550
let's ask it to recommend for
a particular user.

47
00:03:40,830 --> 00:03:45,928
So I'm gonna recommend some
songs this particular user like.

48
00:03:45,928 --> 00:03:50,160
So, this recommender function
takes a list of users and

49
00:03:50,160 --> 00:03:52,040
we're just gonna give one
to the list right now.

50
00:03:52,040 --> 00:03:54,310
And if you remember,
we had that users array.

51
00:03:54,310 --> 00:03:59,510
I'm just gonna give you the first
person in that users array and execute.

52
00:03:59,510 --> 00:04:02,040
So what do you recommend for this person?

53
00:04:02,040 --> 00:04:10,080
A song by Harmonia, a song by Bjork,
King of Leon and so on.

54
00:04:11,550 --> 00:04:13,290
Now look at this very carefully.

55
00:04:13,290 --> 00:04:17,200
Right here Yoakam this what's
being recommended by User zero.

56
00:04:17,200 --> 00:04:21,150
Now let's see what this model
recommends for User one.

57
00:04:21,150 --> 00:04:25,448
So again we're gonna
take popularity model and

58
00:04:25,448 --> 00:04:32,590
I'm gonna call recommend and again,
I'm gonna give it a list of users.

59
00:04:32,590 --> 00:04:36,200
But instead of giving me user zero,
I'm gonna give it user one.

60
00:04:36,200 --> 00:04:42,150
Now before I click Enter here,
Shift+Enter, stop and think.

61
00:04:42,150 --> 00:04:44,140
What am I gonna get back
out of popularity model?

62
00:04:46,780 --> 00:04:49,770
Well, everybody gets recommended
exactly the same things.

63
00:04:49,770 --> 00:04:52,040
Because we just recommended
the most popular items.

64
00:04:52,040 --> 00:04:57,040
So this person also gets recommended
Harmonia, Bjork, Dwight Yoakam,

65
00:04:57,040 --> 00:05:00,040
King of Leon, so basically,
not that exciting.

66
00:05:00,040 --> 00:05:03,310
Everybody gets recommended
the same things.

67
00:05:03,310 --> 00:05:04,613
This is a problem with this model.

68
00:05:04,613 --> 00:05:07,774
[MUSIC]