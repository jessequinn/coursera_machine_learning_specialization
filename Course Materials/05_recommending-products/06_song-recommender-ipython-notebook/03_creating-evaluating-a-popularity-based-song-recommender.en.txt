[MUSIC] Good, so this is our data set. Then the next step for
us is to create a recommender system. So, here we go. Let's go ahead and
create a song recommender. So as usual, we're gonna start
by doing a train test split. So when I take the train_data, the data
is splitted into train and test data. And we do that by taking the song data, we're going to do a random split
on this data set of 80% for training, 20% for testing. And again when we're gonna
set this to zero, so that if you do this at home you'll
get the exact same answers I got. Okay, we've done that split. And now we're ready to train
some recommender models. So just following the lecture
a little bit that Emily gave, the first recommender
model that we're gonna train is a simple
popularity-based recommender. So this is what many websites do,
for example, when they say here are the most email stories or
this is the most purchased products, this is what's most popular, and
most common hashtags on Twitter today. Not a particularly great model,
but it's used a lot. So, let's train our
famous popularity model. I'm gonna call it popularity_model. And all I have to do now is call
graphlab.popularity_recommender. So this is a particular recommender. And I tried create next to it, and as you remember, create is the verb here
that actually creates the recommender. And, I'm gonna give it my
training data as input. And this model takes
a little bit of information. So let me just walk you through it. You have to say what column is
the user_id in the dataset. So in our case that column
is called just user_id. User_id. Then we need to say what
column is the item_id. So the item_id is, in our case
the product, so users and products. But we don't have exactly
a product in our item. Our item here is songs. So item_id is equal to song, and
now when I hit Enter, it creates, and it was very quick, created a simple
popularity based recommender system. So let's just make some predictions. So, in our next step, we're going to use, I'll just scroll down a little bit. Use the popularity model to make some predictions. So for example let's take
this popularity model and let's ask it to recommend for
a particular user. So I'm gonna recommend some
songs this particular user like. So, this recommender function
takes a list of users and we're just gonna give one
to the list right now. And if you remember,
we had that users array. I'm just gonna give you the first
person in that users array and execute. So what do you recommend for this person? A song by Harmonia, a song by Bjork,
King of Leon and so on. Now look at this very carefully. Right here Yoakam this what's
being recommended by User zero. Now let's see what this model
recommends for User one. So again we're gonna
take popularity model and I'm gonna call recommend and again,
I'm gonna give it a list of users. But instead of giving me user zero,
I'm gonna give it user one. Now before I click Enter here,
Shift+Enter, stop and think. What am I gonna get back
out of popularity model? Well, everybody gets recommended
exactly the same things. Because we just recommended
the most popular items. So this person also gets recommended
Harmonia, Bjork, Dwight Yoakam, King of Leon, so basically,
not that exciting. Everybody gets recommended
the same things. This is a problem with this model. [MUSIC]