1
00:00:00,097 --> 00:00:04,125
[음악]

2
00:00:04,125 --> 00:00:07,525
이제 저는 가장 마지막 것을 하고 싶습니다.

3
00:00:07,525 --> 00:00:13,650
왜나하면 이것은 그저 재미있을 것이고, 우리는 모두 신나게 될 수 있기 때문이죠.

4
00:00:13,650 --> 00:00:21,610
제가 여기서 한 것은, 특정 이미지를 위한 특정 자동차에 대한 질의입니다.

5
00:00:21,610 --> 00:00:26,712
이 모든 것들을 할 수 있는 함수를 만들어보죠. 그리고 우리는 이것을 제가 원할 때 아무때나 만들 수 있습니다.

6
00:00:26,712 --> 00:00:31,570
이것은 꽤나

7
00:00:31,570 --> 00:00:35,920
재미있는 일이 될 것입니다.

8
00:00:35,920 --> 00:00:39,418
그저 재미를 위해서

9
00:00:39,418 --> 00:00:45,543
가장 가까운 이웃의 이미지들을 찾고 보여줄 수 있는

10
00:00:45,543 --> 00:00:51,470
함수를 만들어 보죠.

11
00:00:51,470 --> 00:00:54,680
이것은 일종의 파이썬의 사기와 같습니다.

12
00:00:54,680 --> 00:00:55,900
우리는 이것들과 함께 작업하게 되죠.

13
00:00:58,230 --> 00:01:00,360
우리는 이것을 lambda라고 부를 것입니다.

14
00:01:01,470 --> 00:01:05,172
찾기 위해, 아니 그저 직접 보여주기 위해서 입니다.

15
00:01:05,172 --> 00:01:12,268
Show_neighbors를 입력하면

16
00:01:12,268 --> 00:01:20,160
이것은 lambda가 되고 해당 이미지의 인덱스 i를 가져올 것입니다.

17
00:01:21,320 --> 00:01:22,894
그리고 여기 이것이 바로 그것이 하게 될 일입니다.

18
00:01:22,894 --> 00:01:25,754
이것은 우리가 보았던 것과 똑같은 일을 할 것입니다.

19
00:01:25,754 --> 00:01:31,644
따라서 이것은 ID로부터 이미지들을 가져와서 가장 가까운 이웃 모델에 대해 질의할 것입니다.

20
00:01:31,644 --> 00:01:38,040
하지만 자동차에 대한 질의 대신, i부터 i+1까지의 기차의 이미지에 대해 질의해 보죠.

21
00:01:39,520 --> 00:01:43,480
그런 다음 우리는 이미지를 가져온 다음 .show를 호출할 것입니다.

22
00:01:43,480 --> 00:01:46,005
이것은 엄청나게 긴 lambda 입니다.

23
00:01:46,005 --> 00:01:50,247
하지만 이것을 생성하고 난 후 우리는 이것을 가지고 꽤 깔끔한 일을 할 수 있습니다.

24
00:01:50,247 --> 00:01:54,920
이제, 저는 show_neighbors를 호출하고

25
00:01:54,920 --> 00:02:00,098
8이었던 자동차 인덱스 값을 줄 것입니다.

26
00:02:00,098 --> 00:02:06,100
스크롤을 내려보시면, 여러분은 이 빨간 자동차들을 볼 수 있을 것입니다.

27
00:02:06,100 --> 00:02:08,570
정말 멋지죠.

28
00:02:08,570 --> 00:02:11,340
이제 우리는 show_neighbors를 다른 이미지들을 사용해서 호출할 수 있습니다.

29
00:02:13,520 --> 00:02:16,810
저는 실제로 아직 이것들에 대해 생각해보거나 사용해본적이 없습니다. 저는 그저 이 lambda를 만들었을 뿐이죠.

30
00:02:16,810 --> 00:02:20,340
일단 숫자들의 실행을 시도해보도록 하죠.

31
00:02:20,340 --> 00:02:23,270
숫자 26은 어떤가요?

32
00:02:23,270 --> 00:02:26,518
이제 이것은 이미 무엇인지 알고 있는 이웃들까지 찾아낼 것입니다.

33
00:02:26,518 --> 00:02:28,270
26은 바료 여기의 자동차입니다.

34
00:02:28,270 --> 00:02:30,720
우리 모두가 볼 수 있도록 이것을 좀 더 크게 만들어 보겠습니다.

35
00:02:32,750 --> 00:02:36,800
26의 show neighbors는 이 파란색 자동차입니다.

36
00:02:36,800 --> 00:02:40,650
이것은 다른 자동차들을 배치하는데 매우 멋지죠.

37
00:02:40,650 --> 00:02:45,755
다른 숫자를 골라보죠. 이 2,000 또는 1222에 대한 이미지들에 대한

38
00:02:45,755 --> 00:02:50,990
show_neighbors를 실행합니다.

39
00:02:50,990 --> 00:02:56,970
저는 실제로 그것이 무엇이 될 지 모릅니다. 하지만 이제 우리는 이것이 새라는 것을 알 수 있죠.

40
00:02:56,970 --> 00:02:59,125
그리고 여러분은 가장 가까운 이웃을 찾습니다.

41
00:02:59,125 --> 00:03:01,409
새들말이죠. 그리고 그것들은 모두 비슷한 포즈를 취하고 있죠.

42
00:03:01,409 --> 00:03:04,950
그리고 저는 이것이 일종의 타조의 머리와 같다는 것 그리고 다른 종류의 새라는 것을 압니다.

43
00:03:04,950 --> 00:03:07,290
하지만 그것들은 모두 새들이죠. 이것은 꽤 멋지고

44
00:03:07,290 --> 00:03:09,170
우리는 그저 이 깊은 특성들을 사용하고 있다는 것을 기억하세요.

45
00:03:09,170 --> 00:03:12,320
이제 마지막 것을 위해 show_neighbors를 입력하고

46
00:03:12,320 --> 00:03:13,820
여러분은 집에서 이 모든 것들을 가지고 실험해볼 수 있습니다.

47
00:03:13,820 --> 00:03:19,082
이미지 2,000의 show neighbors를 해봅시다.

48
00:03:19,082 --> 00:03:25,330
윱스, 쉬프트+엔터 그리고 이미지 2000의 neighbors는 무엇인가요?

49
00:03:25,330 --> 00:03:27,620
여러분은 자동차를 가졌습니다.

50
00:03:27,620 --> 00:03:28,660
이것은 혼란에 빠졌죠.

51
00:03:28,660 --> 00:03:31,250
이것은 타조를 가졌지만 나머지들은 모두 자동차였습니다.

52
00:03:31,250 --> 00:03:36,478
따라서 단순한 그림들은 이미지 검색에서 꽤 잘 적용됩니다.

53
00:03:36,478 --> 00:03:40,100
여러분은 제가 우리가 시도했던 일부 예제에서 저지른 실수를 보셨을겁니다.

54
00:03:40,100 --> 00:03:44,670
하지만 이것은 실제로 여러분에게 매우 좋은 결과를 보여주었죠.

55
00:03:44,670 --> 00:03:47,730
그리거 이것은 이 데이터시트, 이미지에서 학습된 적이 없습니다.

56
00:03:47,730 --> 00:03:50,496
이미지들은 각기 사이즈가 달랐고 카테고리가 달랐습니다. 하지만

57
00:03:50,496 --> 00:03:52,594
이것은 여전히 잘 작동되었습니다.

58
00:03:52,594 --> 00:03:53,930
따라서 이것들은 매우 광범위하게 재미있는 방법으로 사용될 수 있는

59
00:03:53,930 --> 00:03:58,694
도구들이며 기술들입니다.

60
00:03:58,694 --> 00:04:02,759
[음악]