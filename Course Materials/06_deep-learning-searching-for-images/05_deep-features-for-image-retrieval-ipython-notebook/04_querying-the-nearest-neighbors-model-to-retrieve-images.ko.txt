[음악] 이제 모델을 쓸 수 있습니다 딥 특징을 통한 이미지 검색 모델로 유사한 이미지 찾기 자 이제 모델로 유사한 이미지를 찾아보죠 바로 해봅시다 먼저 특정 이미지, 고양이 이미지를 변수에 저장합니다 image_train에서 18번째 이미지를 꺼냅니다 이렇게 하면 됩니다 뭔지 보여드리기 위해 cat['image'].show를 하면 노트북에 보일 텐데 그전에 캔버스 대상을 IPython으로
설정해야 합니다 이게 지금까지 한 거고요 됐습니다 얼룩무늬 고양이 이미지네요 조금 작아보이지만 고양이 이미지인 건 틀림없습니다 이리저리 만져봐도 됩니다 이 고양이의 최근접 이웃을 찾아보죠 한번 해봅시다 고양이 이미지의 최근접 이웃을 찾습니다 knn_model에 고양이 이미지를 입력합니다 이 고양이 이미지에 가까운 건 이미지 384, 6910 등입니다 숫자만 보고 어떤 이미지인지
알기는 어렵습니다 So when we create that,
we'll create a helper function together
그렇기 때문에 인덱스를 입력하면서 이미지를 실제로 보여주는
도우미 함수도 같이 만듭니다 이 기회에 함수를 정의해봅시다 get_images_ids란 새로운 파이썬 함수를 정의합니다 참조 열에 ID가 있는데 이거고 이미지가 반환됩니다 그러면 여기서 출력은 죄송합니다 출력은 질의의 결과가 됩니다 query_result라고 하지요 함수인데 query_result는 image_train를 반환하는 역할만 합니다 훈련 데이터에다 filter_by란 작업을 실행하면 데이터의 행 집합이 선택됩니다 방금 생성한 query_result를 선택합니다 query_result를 선택하면 reference_label 열로 돌아옵니다 query_result['reference_label']에 이 표에 있는 모든 이미지 중에 reference_label가 일치하면
반환하라고 합니다 도우미 함수가 하는 역할이 그겁니다 이제 계속해서 타이핑할 필요가 없습니다 이제 사용하기 전에 실험을 조금 해봅시다 이 함수를 막 정의했죠 정의했습니다 get_images_from_ids라고 하는게 좀더 자연스럽죠? 그렇게 합시다 이제 해봅시다 고양이 고양이 이미지가 있었는데 cat_neighbors이라고 해둡시다 cat_neighbors은 get_images_from_ids을 호출하고 매개변수로 knn_model에 고양이를
넣은 걸 씁니다 이게 cat_neighbors이 됩니다 이제 이미지를 보여주기만 하면 됩니다 cat_neighbors[' image'].show를 입력합니다 데이터를 보기 위해 조작을
좀 해야 됐는데 가장 가까운 고양이는 입력한 고양이고 다른 고양이도 얼룩무늬인 것 같네요 [음악]