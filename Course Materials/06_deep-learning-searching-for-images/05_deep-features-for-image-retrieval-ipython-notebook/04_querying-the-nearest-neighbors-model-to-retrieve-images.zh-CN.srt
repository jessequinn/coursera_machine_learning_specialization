1
00:00:00,003 --> 00:00:03,681
[背景音乐]
翻译: RyukaSuu |审阅: 19waa
Coursera Global Translator Community

2
00:00:03,681 --> 00:00:06,631
现在我们可以用这个模型

3
00:00:10,421 --> 00:00:14,514
用图像检索的

4
00:00:14,514 --> 00:00:19,570
带有深度特征的模型

5
00:00:19,570 --> 00:00:24,631
来找到相似的图片

6
00:00:24,631 --> 00:00:25,421
接下来

7
00:00:25,421 --> 00:00:29,960
我们要用这个模型来找相似的图片

8
00:00:29,960 --> 00:00:33,860
那么让我们着手实际操作

9
00:00:33,860 --> 00:00:37,880
 首先 我们先找个特别的图片

10
00:00:37,880 --> 00:00:43,000
先定义一只猫 你会看到猫的图片

11
00:00:43,000 --> 00:00:47,090
然后在我的训练图片数据里

12
00:00:47,090 --> 00:00:50,170
我要选取第18张图片

13
00:00:50,170 --> 00:00:54,630
通过这样我就可以获取第18张图片了

14
00:00:54,630 --> 00:00:56,780
之后你知道要怎么做

15
00:00:56,780 --> 00:01:04,190
我要调用cat['image']来展示那张图片

16
00:01:04,190 --> 00:01:06,730
为了在这个notebook窗口展示它

17
00:01:06,730 --> 00:01:11,740
我要把canvas的目标设定为IPython Notebook

18
00:01:13,920 --> 00:01:16,000
这就是我们一直所做的

19
00:01:16,000 --> 00:01:17,620
这样就完成了

20
00:01:17,620 --> 00:01:20,890
这里有张关于猫的图片 一只虎斑猫

21
00:01:20,890 --> 00:01:24,045
这些关于猫的图片看起来有点小 但是

22
00:01:24,045 --> 00:01:25,220
它是一张猫的图片

23
00:01:25,220 --> 00:01:26,420
你可以展示它

24
00:01:26,420 --> 00:01:32,840
那么现在我们可以找到与这只猫最紧邻的图片

25
00:01:32,840 --> 00:01:37,660
那么一起来实现它

26
00:01:37,660 --> 00:01:41,560
现在 我们先找到这只猫图片的最近邻

27
00:01:41,560 --> 00:01:46,550
我现在调出我的knn_model后

28
00:01:46,550 --> 00:01:49,350
查询那张猫的图片

29
00:01:50,990 --> 00:01:54,710
查询过后 你将会看到这张图

30
00:01:54,710 --> 00:02:00,850
最相近的图片编号是384
6910 等等

31
00:02:00,850 --> 00:02:04,280
通过编号查看图片有些困难

32
00:02:04,280 --> 00:02:07,530
所以当我们创建它的时候 我们要一起创建辅助函数

33
00:02:07,530 --> 00:02:11,690
可以通过那些索引编号来展示对应的图片

34
00:02:11,690 --> 00:02:14,810
我们要借此机会定义个函数

35
00:02:16,200 --> 00:02:21,980
我要定义个新的Python函数而且它

36
00:02:21,980 --> 00:02:29,554
被命名为get_images_ids

37
00:02:30,950 --> 00:02:36,210
在这个参考列里就有id 就像这个

38
00:02:36,210 --> 00:02:38,796
之后我们将要取回图像

39
00:02:38,796 --> 00:02:42,902
那么我们这里填

40
00:02:42,902 --> 00:02:48,035
这里应该填写为

41
00:02:48,035 --> 00:02:53,298
应该是 抱歉

42
00:02:53,298 --> 00:02:56,610
要填写的应该是查询的结果

43
00:02:56,610 --> 00:03:01,390
所以我们命名为query_result

44
00:03:01,390 --> 00:03:06,976
而且它是个函数 所以我们要

45
00:03:06,976 --> 00:03:14,010
通过query_result来返回image_train

46
00:03:14,010 --> 00:03:17,361
我要用训练数据

47
00:03:17,361 --> 00:03:22,360
进行个叫做filtered_by的操作来仅仅选取数据集中一部分行

48
00:03:22,360 --> 00:03:31,140
我要通过刚刚创建的query_result来选取

49
00:03:32,180 --> 00:03:36,516
当我通过query_result选取了

50
00:03:36,516 --> 00:03:42,560
返回的reference_label这一列

51
00:03:43,560 --> 00:03:48,775
query_result['reference_label']

52
00:03:48,775 --> 00:03:55,029
我们要做的是返回这数据集中所有的图片

53
00:03:55,029 --> 00:04:04,070
只要该图片的id在reference_label这一列里

54
00:04:04,070 --> 00:04:05,440
这就是辅助函数的样子

55
00:04:05,440 --> 00:04:07,040
这样我们就不会需要总是输入这段代码

56
00:04:07,040 --> 00:04:09,349
我们可以开始使用它 但是

57
00:04:09,349 --> 00:04:13,880
我想用它做些小实验

58
00:04:13,880 --> 00:04:17,470
那么让我们定义这个函数

59
00:04:17,470 --> 00:04:22,350
那么 我们现在已经定义好了

60
00:04:22,350 --> 00:04:25,220
通过id获取图像的函数

61
00:04:25,220 --> 00:04:26,810
实际上 它更加有意义 不是么?

62
00:04:26,810 --> 00:04:31,170
让我们调用get_images_from_ids

63
00:04:32,670 --> 00:04:35,610
来开始做

64
00:04:35,610 --> 00:04:39,301
记住 对于猫

65
00:04:39,301 --> 00:04:45,559
我们已经有了一张猫的图片 所以可以仅仅写

66
00:04:45,559 --> 00:04:50,870
命名为cat_neighbors

67
00:04:50,870 --> 00:04:54,495
而后cat_neighbors要被赋值为

68
00:04:54,495 --> 00:04:59,507
来调用函数get_images_from_ids然后

69
00:04:59,507 --> 00:05:06,660
我要用knn_model查询cat的结果作为输入值

70
00:05:09,150 --> 00:05:10,800
好了 这就是变量cat_neighbors了

71
00:05:10,800 --> 00:05:17,310
也就是图片的近邻 现在 我们可以显示这些图片

72
00:05:17,310 --> 00:05:22,453
这样 调用cat_neighbors['

73
00:05:22,453 --> 00:05:26,440
images'].show

74
00:05:26,440 --> 00:05:30,780
我们已经展示了一些数据 但这次是最近邻的猫

75
00:05:30,780 --> 00:05:35,260
这里的是输入的猫 你可以看到所有最近邻都是猫且

76
00:05:35,260 --> 00:05:37,300
都是与虎纹猫类似的品种

77
00:05:37,300 --> 00:05:42,399
[背景音乐]
翻译: RyukaSuu |审阅: 19waa
Coursera Global Translator Community