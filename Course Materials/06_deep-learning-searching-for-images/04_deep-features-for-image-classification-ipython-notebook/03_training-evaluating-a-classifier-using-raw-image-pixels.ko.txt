[음악] 우리는 폰트를 줄이고 있고 이 데이터 세트에 대해 기본 모델을 훈련할 것입니다. 따라서 첫 번째로 제가 하고 있는 일은 이 사진들을 사용하지 않는 것입니다. 대신에 이미지들의 픽셀을 사용하고 픽셀들에 대한 분류법을 학습해서 그것이 얼마나 잘 작동하는지 봅니다. 그럼 한번 해보도록 하죠. #Train a classifier. 여기에 제가 철자를 잘못 적었네요. 따라서 #Train a classifier를 raw 이미지 픽셀들에 실행합니다. 이것들이 저의 특성들이 될 것입니다. 이런 깊은 특성들이 아닌 raw 이미지 픽셀들 말이죠. 그리고 저는 이것을 raw, 죄송합니다. raw_pixel_model이라고 부르겠습니다. 그리고 제가 사용할 분류법은, 사실 저는 아무 분류법이나 사용할 수 있습니다. 성과는 어차피 같을 것이기 때문이죠. 저는 우리가 감성 분석 노트북에서 사용했던 logistic regression을 사용할 것입니다. logistic regression에서 우리는 데이터 세트를 주어줍니다. 따라서 이것은 트레이닝 데이터 세트가 될 것입니다. 이것이 저의 imgage_train이죠. 저는 이것에게 타깃이 무엇인지 알려줄 것입니다. 타깃은 레이블이라고 불리는 이 데이터 세트 안의 칼럼입니다. 그리고 그 칼럼은 각각의 이미지에 대한 레이블을 가지고 있죠. 그리고 저는 이것에게 사용할 특성들이 무엇인지 알려줄 것입니다. 따라서 이 경우, imgae_array라고 불리는 칼럼이 특성들이 됩니다. 따라서 저는 이것을 실행할 것입니다. 잠시만요, 제가 잘못 표기한 것 같아요. module, 오 예스, 저는 한 가지를 잊었는데 여러분이 알려주셔야 합니다. GraphLab Create에서, 모델을 생성하기 위해 여러분이 사용할 수 있는 동사는 creat입니다. logistic regression을 GraphLab 하세요. 그러면 logistic_classifier.create은 분류법을 생성할 것입니다. 이제, 이것은 실행되어야 합니다. 우리는 raw 이미지 픽셀을 사용해서 분류법을 구축합니다. 그리고 저는 그것이 매우 좋을 것이라고 기대하지 않죠. 하지만 일단 해보도록 하죠. 이것은 방금 막 완료되었습니다. 그럼 이것이 어떤 성과를 내는지 한번 지켜보죠. 첫 번째로 제가 하게 될 것은 모델을 가지고 예측값을 생성하는 것입니다. 그럼 raw 이미지 기반의 단순한 모델을 가지고 #Make a prediction을 해보죠. 저는 테스트 데이터 세트에서 특정 이미지들을 가져와서 분류법이 그것들을 뭐라고 정의하는지 볼 것입니다. 저는 image_test라고 말할 것이고, 이제 처음 3개 이미지들을 살펴보죠. 이미지 0:3은 이미지 0, 1, 그리고 2로 갑니다. 저는 그저 이 이미지들을 살펴볼 것입니다. 그리고 저는 .show()를 그것들에 타입해서 이 이미지들이 무엇인지 여러분에게 보여 줄 것입니다. 여기 있습니다. 이미지들은 제가 말했듯이, 데이터 세트에서 좀 작습니다. 하지만 저는 이것을 여러분들이 볼 수 있게 크게 만들 것입니다. 이미지들은 고양이, 자동차, 그리고 또 다른 고양이입니다. 2마리의 고양이와 자동차네요. 자동차, 고양이, 아닙니다. 고양이, 자동차, 고양이이죠. 그리고 저는 폰트를 크게 유지할 것입니다. 우리가 실제로 결과를 볼 수 있도록 말이죠. 이제, 이 이미지에 대한 레이블을 살펴보죠. 이것은 테스트 데이터입니다. 이것은 요소 0부터 3까지인데, 첫 번째 것은 3입니다. 저는 시각적으로 이것이 고양이, 자동차, 고양이라고 했지만, 이제 실제 레이블을 살펴보죠. 레이블 칼럽에서 여러분은 고양이, 오토모빌, 고양이를 볼 수 있을 것입니다. 자동차가 아니고 오토모빌이네요. 하지만 결국 같은 것입니다. 그럼 이제 이 raw_pixe_model이 무엇을 예측하는지 보죠. 이 3개 이미지들의 데이터 세트에서 이것이 무엇을 예측하는지 알아보겠습니다. 따라서 0:3에 대한 image_test를 실행합니다. 여기에서 사실값은 고양이, 오토모빌, 고양이지만 이것은 새, 고양이, 새를 예측합니다. 이것은 3가지 모두를 잘 못 파악했네요. 고양이를 새로 착각했나봅니다. 이것은 자동차를 고양이로 생각했고 다른 고양이를 또한 새로 생각했습니다. 따라서 이것은 모두 오답입니다. 하지만 이것은 단지 fluke qualitative일 뿐입니다. 처음 몇 개의 이미지들만 착각했을수도 있죠. 그러면 이제 실제 예측값들에 대해서 한번 살펴보죠. 그럼 이제 테스트 데이터의 모델을 평가하고 실제 분류법의 정확도롤 살펴보겠습니다. 테스트 데이터의 모델에 #Evaluating raw pixel을 적용합니다. 저는 이 raw_pixel_model을 가져갈 것이고 evaluate을 호출할 것입니다. 그리고 evaluate이 하는 것은 이런 에러들과 에러 매트릭스들을 계산하는 것이죠. 그리고 저는 테스트 세트를 사용할 것입니다. 그리고 여러분은 여기에서 정확도가 고작 46.8%밖에 되지 않는다는 것을 알게되죠. 형편없네요. 여러분은 4개의 종류를 가지고 있습니다. 랜덤 추축 확률은 25%죠. 밸랜스가 잡혀있습니다. 이것은 여기에서 46%를 가집니다. 그리 기대에는 못미치네요. 거기에는 좀 더 구체적인 내용이 있습니다. confusion 매트릭스는가 구성되었습니다. 저는 이것에 대해 설명하진 않을 것이지만 집에서 여러분은 이것들에 대해 좀 더 알아볼 수 있습니다. 하지만 46%는 기억하세요. [음악]