1
00:00:00,000 --> 00:00:04,172
[背景音乐]
翻译: RyukaSuu |审阅: 19waa
Coursera Global Translator Community

2
00:00:04,172 --> 00:00:09,319
在这个模块里艾米莉 (Emily) 涵盖了用来检索文件和

3
00:00:09,319 --> 00:00:13,580
研究数据表达的多种技术 比如单词统计和TFIDF(词频-逆向文档频率)

4
00:00:13,580 --> 00:00:17,550
现在 整合这些想法 我们将得到一个非常酷的Notebook

5
00:00:17,550 --> 00:00:19,630
并且将使用TF-IDF技术

6
00:00:19,630 --> 00:00:21,370
建立一个文档恢复系统

7
00:00:21,370 --> 00:00:23,040
所以 让我们动手做这些吧

8
00:00:24,290 --> 00:00:28,020
像往常一样 我们将使用iPython Notebook

9
00:00:28,020 --> 00:00:32,160
这一次 我要把标题改为"Document retrieval (文档恢复)"

10
00:00:34,740 --> 00:00:38,530
这样就好了

11
00:00:38,530 --> 00:00:40,830
还是像往常一样 我将隐藏标题栏和工具栏

12
00:00:42,040 --> 00:00:44,480
从而多给我们一点空间

13
00:00:45,590 --> 00:00:50,460
好的 让我们来启用GraphLab Create

14
00:00:50,460 --> 00:00:53,890
所以我们要写 "import graphlab"

15
00:00:53,890 --> 00:00:57,350
因为我们会在我们的Notebook中再次用到它

16
00:00:57,350 --> 00:01:00,610
现在 我们要做的第一步是导入一些数据

17
00:01:00,610 --> 00:01:04,900
让我们导入一些文本数据

18
00:01:06,380 --> 00:01:10,460
这是一份有趣的文本数据 它来自维基百科 (Wikipedia)

19
00:01:12,520 --> 00:01:18,870
它是一些关于人物的页面

20
00:01:18,870 --> 00:01:21,810
很酷的数据
我即将导入它

21
00:01:21,810 --> 00:01:26,860
我们会用到变量people 这是一个SFrame

22
00:01:26,860 --> 00:01:31,570
它等于graphlab.SFrame

23
00:01:31,570 --> 00:01:37,074
来自名为 "people_wiki" 的文件 就在这里

24
00:01:37,074 --> 00:01:40,630
这样就可以了 我们正在导入它

25
00:01:40,630 --> 00:01:45,680
我们首先要做的是看这个文件的最初几行

26
00:01:45,680 --> 00:01:51,200
我继续操作 你们应该能看到

27
00:01:51,200 --> 00:01:55,730
所以这个URI基本上就是这个页面在维基百科 (Wikipedia) 上的位置

28
00:01:55,730 --> 00:01:58,760
这是相关人物的名字

29
00:01:58,760 --> 00:02:04,380
这是该人物页面上的文本

30
00:02:04,380 --> 00:02:09,660
并且你可以在这里找到相当多的人的数据

31
00:02:09,660 --> 00:02:13,340
如果你键入len(people) 显示长度

32
00:02:13,340 --> 00:02:15,060
在我们这个数据集下

33
00:02:15,060 --> 00:02:19,330
并敲下回车 你看我们所谈论的这个数据集中约有5万9千人

34
00:02:19,330 --> 00:02:21,790
这是个不错的数据集

35
00:02:21,790 --> 00:02:26,040
并且你将看到
我们要用TFIDF技术来处理一些十分有趣的文件

36
00:02:26,040 --> 00:02:28,200
甚至这种相对较大的数据集

37
00:02:29,530 --> 00:02:34,901
我们要做的第一件事就是浏览数据

38
00:02:34,901 --> 00:02:42,734
所以让我们浏览数据集并

39
00:02:42,734 --> 00:02:49,789
查看它包含的文本

40
00:02:52,204 --> 00:02:56,360
让我们开始具体关注某一个人的数据集

41
00:02:56,360 --> 00:02:59,150
我们将看到

42
00:02:59,150 --> 00:03:02,040
美国现任总统巴拉克·奥巴马 (Barack Obama) 的页面

43
00:03:04,240 --> 00:03:11,755
从这些人的s-frame中 我将选择姓名为...

44
00:03:11,755 --> 00:03:16,786
这一列是姓名栏

45
00:03:16,786 --> 00:03:22,737
姓名为巴拉克·奥巴马 (Barack Obama) 的那一项

46
00:03:22,737 --> 00:03:29,610
然后我敲下回车键 我就创建了一个名为Obama的新变量

47
00:03:29,610 --> 00:03:34,450
如果你大略扫一眼 就会看到它含有奥巴马 (Obama) 页面的网址

48
00:03:34,450 --> 00:03:39,200
巴拉克·奥巴马 (Barack Obama) 的名字 以及该页面中的文本

49
00:03:39,200 --> 00:03:42,560
然后让我们进一步深入 看看这个文本是什么样的

50
00:03:42,560 --> 00:03:48,210
关于巴拉克·奥巴马 (Barack Obama) 你将会看到

51
00:03:48,210 --> 00:03:53,460
"巴拉克·侯赛因·奥巴马 (Barack Hussein Obama) 
出生于1961年8月4日"

52
00:03:53,460 --> 00:03:58,670
 "现为第44届美国总统"

53
00:04:00,100 --> 00:04:04,700
该文本很符合我们对这种数据的预期

54
00:04:05,720 --> 00:04:09,240
然后我们还可以看看其他人的数据集

55
00:04:09,240 --> 00:04:11,030
举例来说，

56
00:04:11,030 --> 00:04:15,970
这里有个名叫乔治·克鲁尼 (George Clooney) 的演员
他出演过很多电影

57
00:04:15,970 --> 00:04:21,610
看这个people SFrame 我们将选择...

58
00:04:21,610 --> 00:04:26,043
当然这也是一个我们现在几乎随处使用的筛选操作

59
00:04:26,043 --> 00:04:34,381
我们选择名为乔治·克鲁尼 (George Clooney) 的那一项

60
00:04:34,381 --> 00:04:39,720
然后我将继续

61
00:04:39,720 --> 00:04:45,560
向你这是我们得到的
有关乔治·克鲁尼 (George Clooney) 的文本

62
00:04:45,560 --> 00:04:52,080
你会看到乔治·蒂莫西·克鲁尼 (George Timothy Clooney) 出生于1961年

63
00:04:52,080 --> 00:04:57,120
所以 大致来讲他和巴拉克·奥巴马 (Barack Obama) 同龄
但他不是总统

64
00:04:58,180 --> 00:05:00,470
他是一个美国演员、作家、

65
00:05:00,470 --> 00:05:07,861
制作人、导演以及

66
00:05:07,861 --> 00:05:13,199
活动家

67
00:05:13,199 --> 00:05:17,721
就在这儿

68
00:05:17,721 --> 00:05:21,879
[背景音乐]
翻译: RyukaSuu |审阅: 19waa
Coursera Global Translator Community