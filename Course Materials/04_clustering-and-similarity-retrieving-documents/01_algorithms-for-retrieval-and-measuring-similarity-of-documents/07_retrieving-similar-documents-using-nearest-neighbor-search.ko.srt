1
00:00:00,383 --> 00:00:04,253
[음악]

2
00:00:04,253 --> 00:00:06,930
문서 표현하는 법과

3
00:00:06,930 --> 00:00:10,340
문서 간 유사도를 측정하는 법을 알아봤습니다

4
00:00:10,340 --> 00:00:14,170
이제 실제 관심사인 문서 검색으로 들어가 봅시다

5
00:00:15,280 --> 00:00:18,870
누군가 기사를 읽는데 그 기사를 좋아해서

6
00:00:18,870 --> 00:00:21,920
다른 기사도 보여주려 한다고 합시다

7
00:00:21,920 --> 00:00:26,668
가장 인기 있는 방법은

8
00:00:26,668 --> 00:00:29,480
최근접 이웃 검색이란 겁니다
검색 기사가 있을 때

9
00:00:29,480 --> 00:00:31,460
지금 읽고 있는 기사죠

10
00:00:31,460 --> 00:00:32,650
말뭉치도 있습니다

11
00:00:32,650 --> 00:00:35,930
검색을 전개하고자 하는 모든 문서의 총합이고

12
00:00:37,040 --> 00:00:39,070
여기서 추천할 새 기사를 고르게 되죠

13
00:00:39,070 --> 00:00:40,420
최근접 이웃 검색을 위해서는

14
00:00:40,420 --> 00:00:44,800
거리 기준을 확립해야 합니다

15
00:00:44,800 --> 00:00:48,080
이전에 논한 유사도 측정이

16
00:00:48,080 --> 00:00:49,490
될 테고

17
00:00:49,490 --> 00:00:54,670
알고리즘은 관련 기사 모음을 결과물로 내놓습니다

18
00:00:57,020 --> 00:01:01,990
최근접 이웃 검색의 예 하나는 1-최근접 이웃인데

19
00:01:01,990 --> 00:01:04,790
검색 기사에서 모든 기사 중

20
00:01:04,790 --> 00:01:10,940
가장 관련된 기사를 반환합니다

21
00:01:10,940 --> 00:01:12,130
알고리즘은 아주 간단합니다

22
00:01:12,130 --> 00:01:15,619
말뭉치의 모든 기사에서 검색해서

23
00:01:15,619 --> 00:01:20,573
초록색 기사들인데 아까 설명드린 방법으로

24
00:01:20,573 --> 00:01:24,900
검색 기사와 말뭉치 기사 간의

25
00:01:24,900 --> 00:01:27,640
유사도를 계산합니다

26
00:01:27,640 --> 00:01:28,306
그리고

27
00:01:28,306 --> 00:01:33,271
유사도가 지금까지의 최고 유사도보다 높다면

28
00:01:33,271 --> 00:01:38,330
이 기사를 다시 선택합니다

29
00:01:39,760 --> 00:01:45,020
말뭉치의 모든 기사를 훑은 다음에

30
00:01:45,020 --> 00:01:48,360
가장 유사도가 높은 기사를 살펴봅니다

31
00:01:48,360 --> 00:01:51,010
그리고 이걸 사용자에게 추천하죠

32
00:01:53,140 --> 00:01:56,710
이 알고리즘의 간단한 변형은 k-최근접 이웃 검색인데

33
00:01:56,710 --> 00:02:01,220
가장 관련 있는 기사를 출력하는 대신

34
00:02:01,220 --> 00:02:06,360
가장 관련 있는 k개의 기사 모음을

35
00:02:06,360 --> 00:02:09,580
보여줍니다

36
00:02:09,580 --> 00:02:12,140
그러기 위해

37
00:02:12,140 --> 00:02:17,300
알고리즘은 가장 관련 있는 하나만 저장하는 건 동일하지만

38
00:02:17,300 --> 00:02:22,340
우선순위 큐로 기사 k개를 유지한다는 게 다릅니다